[{"title":"关于配置Reality的加分项","url":"/2025/01/19/关于配置Reality的加分项/","content":"## 关于配置Reality的加分项\n加分项：IP 相近（更像，且延迟低），Server Hello 后的握手消息一起加密（如 dl.google.com），有 OCSP Stapling。\n配置加分项：禁回国流量，TCP/80、UDP/443 也转发（REALITY 对外表现即为端口转发，目标 IP 冷门或许更好）。\n\n<!--more-->\n\n### 如何找到一个适合 REALITY 配置的目标网站？\n\n**要求：**\n\n1. 「安全」选项卡查看以下内容，显示 已使用 TLS 1.3 、X25599 为符合要求的网站，其他不符合。\n\n![图片](../image/vless&reality/checkTLS.png)\n\n2. 「网络」选项卡需要先刷新页面，在表头空白处点击右键，勾选协议，如协议列中出现 H2 为符合要求的网站，没有出现则不符合。\n\n![图片](../image/vless&reality/checkH2.png)\n\n#### 方法1\n打开https://bgp.tools/\n输入你的VPS的IP地址\n然后点DNS选项卡，选Show Forward DNS。\n下面有你同网段一堆域名给你选，然后挑几个域名，点进去，然后用浏览器的开发者工具看看是不是TLS 1.3以及X25519证书的。\n好处是：同网段、网站都够冷门、延迟都在1ms内偷证书速度飞快。\n\n\n#### 方法2\nhttps://myip.ms/ 输入自己vps的ip地址，然后点击Other Sites on IP。\n![图片](../image/vless&reality/myip2.png)\n往下滑找到Known Websites between或Websites IP Address Change History for IP即可。\n![图片](../image/vless&reality/myip1.png)\n\n\n#### 方法3\n\nhttps://www.ssllabs.com/ssltest/\n找到Recent Best中的A+网站，再按照要求测试即可。若没有找到合适的网站刷新再次寻找即可。\n![图片](../image/vless&reality/sslabs1.png)\n\n\n\n### ocsp stapling检测（加分项）\n若网站不支持也没关系，属于是加分项。\n根据以上的方法找到目标网站后，查询目标网站是否支持 OCSP Stapling，点击[查询网站](http://web.chacuo.net/netocspstapling)来查询。\n\n![图片](../image/vless&reality/checkOcsp.png)\n\n\n\n","categories":["study","tech"]},{"title":"网络技术-二层安全","url":"/2024/10/20/网络技术-二层安全/","content":"\n## 广播风暴\n\n### 广播风暴的现象\n\n1. 交换机指示灯疯狂闪烁.\n2. switch CPU利用率高。\n3. switch 命令行卡顿。\n4. 用户上网慢获知不能上网。\n5. 出现MAC地址漂移。\n6. 抓包发现很多ARP、DHCP discovery广播包。\n   \n### 广播风暴可能的原因\n1. 二层环路(没启用生成树或生成树故障，设备/接口故障)。\n2. 网络中存在攻击行为(某些终端持续恶意发送广播包)。\n\n<!--more-->\n\n#### 解决的方法\n1. 划分VLAN，隔离广播域，缩小广播传递的范围。\n2. 通过STP/MSTP、堆叠、链路聚合等破除二层环路。\n3. 查杀终端病毒，消除网络攻击、配MAC地址黑名单或配ACL(访问控制列表)阻断。\n4. 在交换机上配置相关技术或者协议功能来广播抑制。\n\n### 流量抑制\n#### 作用\n\n限制二层网络转发的广播、未知的组播和未知的单播的报文能力。\n\n#### 流量抑制的核心配置\n\n```bash\n# 缺省情况下，缺省的抑制模式为packets，在bits模式下，流量抑制的粒度更小、抑制更精确。\n[Switch] suppression mode by-packets\n\n[Switch] interface g0/0/1\n[Switch-g0/0/1] unicast-suppression 80 //未知单播流量抑制为80%。\n[Switch-g0/0/1] multicast-suppression 70 //未知组播流量抑制为70%。\n[Switch-g0/0/1] broadcast-suppression 60 //广播播流量抑制为60%。\n\n# 查看流量抑制的配置信息\n[Switch] display flow-suppression interface g0/0/1\n\n```\n\n### 风暴控制\n\n#### 作用\n\n防止二层网络转发的广播、未知组播和未知单播报文产生的广播风暴。\n\n#### 风暴控制的核心配置\n\n```bash\n[Switch] storm-control whitelist protocol arp-request //配置arp请求为白名单。\n\n[Switch] interface g0/0/1\n[Switch-g0/0/1] storm-control broadcast min-rate 1000 max-rate 2000 //广播包若小于1000则恢复，若大于2000就阻塞。其中broadcast可以换为multicast（组播）、unicast（单播）根据需求来做配置。\n\n[Switch-g0/0/1] storm-control interval 90 //90秒间隔控制\n[Switch-g0/0/1] storm-control action block //若达到条件就阻塞。其中action可选 block/error-down，其中block为阻断，error-down为关闭接口。\n\n[Switch-g0/0/1] storm-control enable trap //开启snmp trap报文。\n\n```\n\n### 流量抑制与风暴控制的区别\n\n#### 相同处\n\n- 两者都是为了防止广、组和未知单播引起的广播风暴。\n\n#### 不同处\n \n|流量抑制|风暴控制|\n|:---:|:---:|\n|当流量超过阈值时,**将丢弃多余流量**|当流量超过阈值时,**直接关闭端口**|\n\n\n## MUX-VLAN\n### 介绍\n可对二层流量进行隔离。\n分为三个组：\n1. 主VLAN：与隔离VLAN、组VLAN能互通。\n2. 隔离VLAN：隔离VLAN内互相隔离，且不能与组VLAN互通。\n3. 组VLAN：组VLAN内可互通，与隔离VLAN隔离。\n\n例：\n![图片](../image/network/Layer2security/muxvlan01.png)\n\n### MUX-VLAN核心配置\n```bash\n[Switch] VLAN100 //进入VLAN100视图\n[Switch-VLAN100] mux-vlan //将VLAN100启用mux-vlan,并设为主VLAN\n[Switch-VLAN100] subordinate separate 200 //设VLAN200为隔离VLAN\n[Switch-VLAN100] subordinate group 300 //设VLAN300为组内VLAN\n#进入接口视图,并划入相应VLAN（其余接口配置除VLAN不同，其他一致）\n[Switch] interface g0/0/5\n[Switch-g0/0/5] port link-type access\n[Switch-g0/0/5] port default vlan 100\n[Switch-g0/0/5] port mux-vlan enable //端口下必须开启mux-vlan否则不能隔离\n\n```\n\n## 端口隔离port-isolate\n\n### 介绍\n\n可以实现同一VLAN内端口之间的隔离，能为用户提供更安全、更灵活的方案。\n\n### port-isolate核心配置\n例: 将G0/0/1与G0/0/2部署同一端口隔离组,则两端口无法实现二层互通。\n\n#### 双向隔离\n```bash\n[Switch] interface g0/0/1 \n[Switch-g0/0/1] port-isolate enable group 1 //同一组下隔离不同则通。\n[Switch] interface g0/0/2\n[Switch-g0/0/2] port-isolate enable group 1\n```\n\n#### 配置G0/0/2到G0/0/1单向隔离\n\n```bash\n\n[Switch-g0/0/2] am isolate g0/0/1\n```\n\n#### 其他命令\n\n```bash\n\n[Switch] port-isolate mode {L2|all} //配置端口隔离模式，默认隔离为二层\n```\n\n- L2端口隔离模式为二层隔离，三层互通。\n- all为二、三层都隔离。\n\n```bash\n\n[Switch] display port-isolate group all //查看端口隔离组信息\n[Switch] arp-proxy inner-sub-vlan proxy enable //开启arp代理可以互通\n```\n\n\n## MAC Flood\n\n### 原理\n\n本质上是耗尽交换机的MAC地址表的DOS攻击。\n\n### 解决方式\n1. 静态MAC地址绑定\n2. 配置端口安全\n\n### 端口安全\n\n#### 介绍\n\n将学习到动态MAC地址转换为**安全MAC地址**,阻止非法用户通过本接口和交换机通信，从而增强设备的安全性。\n\n- 应用在接入层设备，可以**防止仿冒用户从其他端口攻击**。\n- 在汇聚层设备，可以**防止伪冒用户从其他端口攻击**。\n- 在汇聚层设备，可以**控制接入用户的数量**。\n- 启用后，端口之前学习到的动态MAC将被删除。\n\n#### 安全MAC地址类型\n1. 安全动态MAC地址：默认不老化，除非配置老化时间。**重启后丢失**。\n2. 安全静态MAC地址：手动配置MAC地址，不老化。**保存后不丢失**。\n3. Sticky Mac地址：安全动态和之后学习到都会转换为Sticky。**不老化，不丢失**\n\n#### 保护动作\n\n- 流量若违规，则采取保护措施\n\n1. restrict：**丢弃**源MAC地址不存在的报文。**告警**。\n2. protect：**丢弃**源MAC地址不存在的报文。**但不告警**。\n3. shutdown：接口状态被设为**error-down**。**告警**。关闭后不会自动恢复，使用`restart`重启接口进行恢复。\n\n#### 端口安全的核心配置\n\n- 在接口视图下：\n\n```bash\n[Switch] interface gigabitethernet 0/0/1\n[Switch-GigabitEthernet0/0/1] port-security enable   //使能端口安全功能\n[Switch-GigabitEthernet0/0/1] port-security protect-action {protect/shutdown/restrict} //配置保护动作\n\n[Switch-GigabitEthernet0/0/1] port-security max-mac-num 10 // 使能端口安全后，最大安全mac地址数为10。接口默认限制数为1，如果确认限制一个用户，可以不用配置。\n\n[Switch-GigabitEthernet0/0/1] port-security mac-address sticky // 配置sticky\n[Switch-GigabitEthernet0/0/1] port-security mac-address H-H-Hd\n //配置安全静态MAC地址\n\n\n # 验证安全MAC表项\n [Switch] display mac-address security //验证安全MAC表项\n\n\n```\n","tags":["广播风暴","流量抑制","风暴控制","端口安全","二层协议","mux-vlan"],"categories":["network"]},{"title":"白云学院-关于如何申请学校edu邮箱","url":"/2024/10/07/白云学院-关于如何申请学校edu邮箱/","content":"\n## 前言\n\n很多同学都不知道教育邮箱、学信网认证有很多隐藏的福利可以省下很多钱，并且许多企业都有推行高校学生权益，你不单止可以免费使用正版软件，还可以以最优惠的价格购买他们的产品。就来让我打破你们的信息差吧！\n\n<!--more-->\n\n### 怎么申请教育邮箱？\n\n1. 打开企业微信中的Workspace，选择一站式服务。\n![图片](../image/edu邮箱/edustep1.jpg)\n2. 选择学生服务中的邮箱开户\n![图片](../image/edu邮箱/edustep2.jpg)\n3. 点击左下角的事项办理\n![图片](../image/edu邮箱/edustep3.jpg)\n4. 填入相关信息\n![图片](../image/edu邮箱/edustep4.jpg)\n\n- 邮箱用途填学习需要\n- 预计毕业时间按照你入学的年份往后推4年，月份填7月。\n- 申请理由可以自定，我填的是`需要下载JetBrains全家桶学习用途`，你们可以仿造我这个写。\n- 一般等待三个工作日即可。还有一点就是审批是需要你们辅导员同意的，你可以提前跟辅导员说明下，这样会快一些。\n- 审批完成拿到邮箱账号和初始密码之后，去[163网易企业邮箱](https://qy.163.com/login/)去更改你的初始密码，随后可以在企业微信里面的邮箱去登录，这样看邮箱会方便一些。\n\n### 怎么申请学习网验证报告？\n\n- 根据[《白云学院学籍管理实施细则》](https://xxgk.baiyunu.edu.cn/html/cn/xsfw/405.html)规定\n![图片](../image/edu邮箱/白云学籍管理.png)\n你们的学籍是需要被复查，复查后才准予注册取得学籍。\n- 按照以往来看一般会在你们军训结束之后才会有学信网学籍，到时候你们要自己注册学信网来去核验自己的学籍信息。\n- 关注微信公众号学信网或者上[学信网官网](https://www.chsi.com.cn/)\n![图片](../image/edu邮箱/xuexinacc.png)\n- 在下方栏在线服务，选择学信档案项\n![图片](../image/edu邮箱/xuexinacc1.png)\n- 有账号的登录没账号的注册\n- 在学信档案处点击自己的学信档案，下方有个申请验证报告\n![图片](../image/edu邮箱/xuexin.jpg)\n\n### 学哥正在薅的羊毛\n\n- 拿到学信网学籍，拿到学校edu邮箱后请你们大大的使用，不要给他们赚了！\n\n### 支付宝\n\n- 在支付宝中搜索`学生认证`，点击第一个`支付宝学生验证`。\n![图片](../image/edu邮箱/Alipay1.jpg)\n\n- 填入上面提到的申请的在线验证报告\n![图片](../image/edu邮箱/xuexin1.png)\n\n- 验证成功后你就可以看到这个界面\n![图片](../image/edu邮箱/Alipay2.jpg)\n\n然后你们就可以开始薅支付的羊毛啦~\n\n- 更多支付宝福利可以搜索`青春特权`。\n\n![图片](../image/edu邮箱/Alipay3.jpg)\n\n#### 海底捞\n\n验证好支付宝后还可以享受海底捞的学生优惠，详细可以在支付宝上搜索海底捞。\n![图片](../image/edu邮箱/haidilao1.jpg)\n\n#### 麦当劳\n\n还能享受麦当劳的学生福利每个星期都有不同券可以领，在支付宝上搜索麦当劳，点击麦当劳学生福利，认证学生身份即可领取。\n![图片](../image/edu邮箱/Alipaymcd.jpg)\n\n- 不仅如此学生购买O麦金会员有还能比大众版的要便宜3元。\n![图片](../image/edu邮箱/Alipaymcd1.jpg)\n\n### 美团\n\n- 大学生少不了什么，没错就是吃饭，美团也有对大学生的福利。\n- 在主界面搜索`美团外卖学生版`，自动跳转到认证界面，根据提示进行认证。\n![图片](../image/edu邮箱/meituan认证.jpg)\n- 认证好之后记得打开学生版，在外卖界面中点击更多，点击学生版。\n![图片](../image/edu邮箱/meituan1.jpg)\n- 把学生版功能打开\n![图片](../image/edu邮箱/meituan2.jpg)\n打开之后回到外卖界面，往上滑可以看到米粒，每天都可以通过米粒换取海量的美团卷。\n![图片](../image/edu邮箱/meituan3.jpg)\n\n\n\n\n### Microsoft\n\n#### MS365\n#### Onedrive\n\n### JetBrains全家桶\n\n学计算机的当然少不了用IDE，我自己也是用JetBrains的全家桶，几乎所有的主流语言Jetbrains都有，像是Java可以用IntelliJ IDEA，Python可以用PyCharm等等。\n话不多说，到底怎么申请？\n\n- 在拿到学校的edu邮箱后，到[JetBrains官网-免费教育许可证](https://www.jetbrains.com.cn/community/education/#students)去申请免费教育许可证。\n\n- 滑到最下面点击`立即申请`\n\n![图片](../image/edu邮箱/Jetbrains1.png)\n\n- 根据提示填写，请务必一定要用学校的edu邮箱去申请，如果你不满13岁请勾选`我不到13岁`\n![图片](../image/edu邮箱/Jetbrains2.png)\n\n- 点击申请免费产品后，你会收到一封电子邮件，需要确认。\n![图片](../image/edu邮箱/Jetbrains3.png)\n\n- 滑到最下面点接受accept\n![图片](../image/edu邮箱/Jetbrains4.png)\n\n- 之后它会再给你发一封邮件来去绑定你的Jetbrains账号，点击Link Your free license。\n![图片](../image/edu邮箱/Jetbrains5.png)\n\n- 打开后会跳转到登录界面，建议用学校的邮箱来注册。\n![图片](../image/edu邮箱/Jetbrains6.png)\n\n- 注册好登录后，出现这个界面就代表可以免费使用Jetbrains的全家桶啦，可以根据你的需求去下载。\n![图片](../image/edu邮箱/Jetbrains7.png)\n\n**注意**：过了有效期后，它会发送一个邮件给你去做续订，只要你的edu邮箱是有效的即可。\n\n### Github学生包\n\n作者：[西行妖](https://my.toho.red/)\n\n如果你是计算机相关专业的学生，而你又申请了edu邮箱，那么你千万不能错过这项福利，因为你从这里能薅到的羊毛比本页面所有地方加起来还要多。不信？那么我来简单列一个表：\n\n- 价值200USD的DigitalOcean、Azure云服务额度\n- 价值8USD的.me域名\n- 价值100USD的Github Copilot代码助手\n- 价值399USD的Unity Pro订阅\n- 价值149USD的Jetbrains全家桶\n\n这还只是一小部分，里面还有很多计算机专业学生必不可少的福利没有列出来，但光是这些应该足够让你心动了。那么心动不如行动，下面开始进行申请教程：\n\n1. 打开[education.github.com](https://education.github.com)，点击Join Github Education进入申请页面。\n![图片](../image/edu邮箱/github1.png)\n\n2. 拉到最下面，输入Guangdong Baiyun University进行搜索，如果你的GitHub账号没有绑定你的edu邮箱，就会提示你进行绑定验证，点击Add a email address进行添加。\n![图片](../image/edu邮箱/github2.png)\n\n3. 在下面的Add email address输入你的edu邮箱，并根据指示进行验证。\n\n4. 验证成功，再回到这个页面就会发现Continue按键绿了，点击即可进入填表页面，如实填写就行。  \n\n**这里有一个坑要注意，在填这个表时必须关闭一切代理，否则会直接以spambot为理由拒绝你的这次申请。**\n\n在填完表后点击提交，如果一切顺利的话几分钟后就会收到邮件提醒你申请成功。\n\n5. Enojy yourself :)\n","categories":["university"]},{"title":"白云学院维修部指南-第一章硬件性能的认识","url":"/2024/10/02/维修部指南-第一章/","content":"\n## 前言\n- 介于我在国庆回家的路上在想着怎么样才能让自己的社团成员学习到维修的一些知识呢，我想到了写一篇blog来教你们如何快速的入门。\n- 作为24届白云学院计协维修部的副部长，具备扎实的电脑维修知识和实践能力是作为维修部成员是必备的素质。我希望这一篇指南可以传承下去让白云学院每一届的维修部的同学都有所受益。\n- 本指南将从电脑的基础知识入手，详细介绍电脑各个部件的功能与作用，并通过实践拆装电脑、清灰等操作，让大家亲自动手，掌握实用的维修技巧，我们还将深入讲解BIOS的基本概念和常用设置，以及如何重装系统等高级操作。\n- 此篇适用于广东白云学院计算机协会维修部或者其他部门的每一个成员，以及为有兴趣的同学提供学习指南。\n\n\n\n<!--more-->\n\n\n\n\n#### 计算机协会维修部介绍\n- 关于维修部的官方宣传图\n![宣传图](../image/weixiu/weixiu_xuan.jpg)\n\n#### 加入社团你可以获得什么？\n- 问到这个问题之前也可以问问你自己加入社团的初衷是什么。\n- 在面试的过程当中我也有随机问想加入计协的同学，有些人回答加入社团可以让你的大学更加完整更加的有仪式感，有些人回答可以跟师兄师姐学习计算机的知识，可以跟着师兄师姐做项目和竞赛（~~我很菜我没竞赛经验哭哭~~）等等很多各种各样的回答。\n- 那么以我为例子学哥在经历一年的大学社团学到了什么获得了什么？\n  - **拓展自己的人脉**：我认识了各个专业不同的人，当然也认识了很多师兄师姐。\n  - **个人素质的提升**：在部门参与了教学培训工作，增强我的责任感和自信心培养了我的领导能力和口才能力。\n  - **交流的平台**：与同届和师兄师姐分享学习经验心得，拓展自己的视野，共同进步。\n  - **帮助他人**：加入社团之后我能帮助到更多的人，我首先是个非常乐于助人的人。在读大学之前也有很多人帮助过我，不至于处处碰壁。我认为这种美德就应该回馈跟传承下去，如果每个人都喜欢白嫖，那么不会有下一个人捞我一把，这就是我的信仰。如果你觉得你也很感谢别人帮助你那么请帮助下一个需要被帮助的人，让这种美德不断地传递下去。\n- 我认为现在的知识变得越来越廉价，你想要学习什么想要知道什么一问百度一问chatgpt就可以很轻松地获得答案，所以加入社团最重要的不是知识本身，而是你在跟别人交际的时候学习到的一些人情世故，是听不同的人的不同的故事和经验，是你所能交到的朋友，这些无疑是比知识更宝贵的。\n- 无论你加入社团的目的是什么，请记住他并且坚持下去。\n\n\n\n## 电脑硬件的基本组成--如何看懂电脑的性能参数\n- 这里不会过多的去描述各种各样的原理，这些你们上课会学到。\n  而这里会更多的去让你拓展课上老师不会教你的东西，例如CPU（中央处理器），GPU（图形处理器）、RAM（内存条）这些型号为什么这样命名、Intel和AMD怎么去做对比，内存条中的DDR4、DDR5是啥等等会在以下介绍。\n\n### 水桶效应\n\n- 这里要给同学先引入一个概念called`水桶效应`或者称`短板效应`，那么就是你能装的水取决于你木桶的最低处，在计算机性能、网络性能就如同木桶里的水一般等等都能应用到这个概念。\n\n![木桶效应](../image/weixiu/woodbucket.png)\n\n- 对于计算机性能取决于你的最短板，例如说你的固态硬盘M.2 SSD NVME是需要跑到`PCIE4.0`通道才能发挥出它的所有性能，但是你的主板只支持`PCIE3.0`，那么你的固态硬盘的性能就会被主板这个短板所限制住。\n\n- 对于网络而言，你的所有交换机、光猫、路由器都是千兆级别的，但是由于你用的网线是百兆的，所以你的短板是在网线上你最大的速率就只能被限制在百兆的环境中。\n\n---\n\n### 中央处理器（CPU）\n\n- CPU是电脑的核心，CPU不仅仅是做运算它还控制着电脑各个硬件资源的调度，一个CPU的好坏，直接影响计算机性能的高低。\n  \n ![图片](../image/weixiu/fennuo.png)\n\n- 一般长这样\n  \n ![图片](../image/weixiu/cpu.png)\n\n- 要想了解CPU的性能参数有哪些，我们可以下载[CPU-Z](https://www.cpuid.com/softwares/cpu-z.html)来查询自己的CPU型号来一览CPU的性能参数，不仅如此用这个工具还可以查询到主板、内存、SPD(可以看内存的一些预设以及插槽)、显卡还能用这个软件做一些简单的跑分来对比同型号的性能差异来检测出你这台电脑CPU性能的释放是否正常。\n\n![CPU-z图片](../image/weixiu/cpu-z.png)\n\n#### CPU的命名规则-Intel\n- 很多同学还认为i9一定比i7强，i3一定就比i5弱这种概念。其实不然i3未必就比i5弱以`i3-12100`与`i5-8400`对比为例子在`Cinebench R23`上的跑分\n\n![CPU-z图片](../image/weixiu/i3vsi5.png)\n快来对比以下你们手上的CPU比例子中`i3-12100`强多少[对比网站](https://nanoreview.net/en/cpu-list/cinebench-scores),当然你们也可以自己下载[Cinebench R23](https://apps.microsoft.com/detail/9pgzkjc81q7j?hl=zh-tw&gl=CN)来测试自己电脑CPU的性能，我推荐你们使用Cinebench来测试性能而不是鲁大师因为我认为鲁大师是款流氓软件对你系统的环境很不友好并且鲁大师算法及其不稳定没有太多的参考意义，所以网友都称它为娱乐大师。\n\n- 从跑分可以看出来这款`i3-12100`的CPU型号不论单核性能还是多核性能都明显优于`i5-8400`反应出i3未必比i5弱，所以i3-i5-i7-i9其实不是判断性能的唯一标准，要想知道CPU某一款的性能是否要比另一款要好，我们就得来研究CPU的命名规则。\n  \n##### 产品线\n\n以我的电脑为例子全称为`Intel Core i5 processor 12490F`\n- Intel表示的是品牌通常我们直接忽略掉。\n- Core 表示的是产品线名字，代表了不同的产品线定位除了Core以外还有像是`Celeron（赛扬）`、`Pentium（奔腾）`、`Core（酷睿）`、`Xeon（至强）`。\n\n![产品线名](../image/weixiu/core.png)\n\n在同一时期下他们之间的性能：`Celeron（赛扬）` < `Pentium（奔腾）`< `Core（酷睿）` < `Xeon（至强）`\n\n- 其中`Core`酷睿是消费级当中最为主流的也是最为常见的。\n\n---\n\n##### 系列\n\n到了我们喜闻乐见的i3-i5-i7-i9，它所指的并不是具体的某个产品而是一个系列。\n- i3表示低端产品\n- i5表示中端\n- i7表示高端产品\n- i9就是最强的旗舰级产品\n  \n 单纯从i3-i5等这么去看很显然跟我们之前的[对比](#CPU的命名规则-Intel)不符合，当然这个是需要一个前提那么就是在相同的时间维度上才成立，他需要与代数来综合判断整体的性能，那么怎么看呢？\n\n- 我们可以看到`12490F` 看到四位数字的前两位`12`代表着是12代Core（酷睿）当然同一代也衍生出不同的系列例如`i7-12700`、`i9-12900K`等等，他们是同一代的情况下那么拿i3-i5-i7-i9来对比就成立。\n- 最早的一代的命名`i5-750`，第二代就是`i5-2XXX`从第二代开始的第一个数字就代表了第几代，同理第九代的就形如`i5-9xxx`，到了第十代开始就变成了前两位数字以十三代为例`i7-13700K`这样以此类推。\n\n  ![代数](../image/weixiu/13700k.png)\n\n- 所以同样是i7不同的代数，性能相差的不是一点两点而是十万八千里。\n\n ![i7对比图](../image/weixiu/i7vs.png)\n\n ---\n##### 子型号\n\n- `i5-12490F`十二代数完之后的数字`490`就是子型号。\n\n以i5-十二代为例有区分诸多的子型号。\n\n![i7对比图](../image/weixiu/i5-12.png)\n\n通常情况下数值越高性能越强，价格也就更贵一些。\n\n- 以`i5-12400`对比`i5-12600K`为例:\n\n![对比图](../image/weixiu/12400vs12600K.png)\n\n相对于`12400`而言，基础频率以及最大[睿频](https://www.intel.cn/content/www/cn/zh/gaming/resources/turbo-boost.html)（Turbo类似于Intel的自动超频,可以在安全温度和功率限制内，将CPU频率提升）都有所提升，核心数增加了4个，还引入了E核（Efficient-core）和P核（Performance-core）的技术，L2和L3缓存都略有升级。\n\n- 当然还有核显上的提升，关于显卡的性能后面会再介绍。\n\n![对比图](../image/weixiu/GPU12400vs12600K.png)\n\n以上就是不同子型号所带来的性能差异，但是获得性能是有代价第一点就反应在价格上，其次对于CPU的供电、功耗也会有相应的要求，后续也会介绍到不同定位的主板对于CPU等供电的差别。\n\n---\n\n##### 后缀\n\n- 像是`12600K`的`K`是啥意思，`F`又是啥意思。\n- 而后缀在台式机上用的CPU与笔记本上的CPU上有所差别。\n\n\n| 桌面端 | 后缀 | 解释 |\n| :----: | :----:  |:----:|\n|      | 无后缀的标准版 | 带核显锁倍频 |\n|      | K | 解锁倍频，支持超频可以通过与超频主板的配合超频，提升电脑性能 |\n|      | F | 无核显，需要搭配独立显卡才能使用，没有带K就表示锁倍频 |\n|      | KF | 与上一个相同，无核显，但是解锁倍频可以超频 |\n|      | T | 低功耗节能版，但作为代价CPU的性能会打折扣 |\n|      | X/XE | 最高性能，通常是工作站级别的，价格也是较贵的 |\n|      | S | 特别版 |\n\n| 移动端 | 后缀 | 解释 |\n| :----: | :----:  |:----:|\n|      | H | 标准电压的移动端CPU，一般对比桌面端阉割系数较小 |\n|      | U | 低电压，低功耗，性能较低，发热小 |\n|      | Y | 比U功耗更低的移动端CPU |\n|      | HK | 标准电压，不锁倍频可以玩超频的移动端CPU |\n|      | P |    针对轻薄型笔记本电脑进行性能优化    |\n|      | G1-G7 | 显卡级别（采用较新集成显卡技术的处理器） |\n\n除了这些还有更多的后缀详细可以参考[Intel官网的后缀介绍](https://www.intel.cn/content/www/cn/zh/processors/processor-numbers.html)，这里只介绍常见常用的。\n\n##### Intel新命名方式-十四代之后\n\n\n- 与上述讲述的命名方式不同的是，Intel从十四代之后更换了它的命名规则，Intel会保留Core酷睿，但i9、i7、i5、i3之类的分类会被Ultra+数字取代，命名会变成酷睿Ultra+数字来区分。其他命名逻辑与之前类似。\n\n\n旧命名：\n![旧命名](../image/weixiu/14genoldnamed.png)\n\n新命名：\n![新命名](../image/weixiu/14gennewnamed.png)\n\n\n\n##### 关于CPU命名的拓展学习\n\n[【硬核科普】CPU是如何命名的，数字更大就一定更好吗]( https://www.bilibili.com/video/BV17u4y1979X/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88)\n\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=829814964&bvid=BV17u4y1979X&cid=1236137266&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n\n---\n\n#### CPU的性能指标\n\n- **核心数（Cores）**：Intel CPU的核心数从双核到多核不等，高端产品如Core i9系列可达10核以上。核心数越多，处理多任务的能力越强。\n- \n![图片](../image/weixiu/cpuz_core1.png)\n\n- **主频（Clock Speed）**：CPU的主频=外频x倍频。CPU的默认运行频率，单位为GHz，越高越性能越强但同时需要更高的电压去推动，一些超频玩家也是超这个来提升CPU的性能\n\n![图片](../image/weixiu/cpuz_core.png)\n\n- **线程数（Threads）**：线程是CPU执行任务的基本单位。一些CPU支持超线程技术，可以模拟出比核心数更多的线程，提高并行处理能力。\n![图片](../image/weixiu/cpuz-xianchen.png)\n\n- **架构**：越新的架构对[IPC](https://www.cnblogs.com/liujiaxin2018/p/16534744.html)的性能就越好，IPC性能可以理解为这颗CPU最最基础的计算能力，也有例子表示在同频率同核心的情况下架构的优化会直接影响IPC性能。\n\n![图片](../image/weixiu/cpuz_jiagou.png)\n\n- **缓存（Cache）**：CPU缓存是位于CPU内部的高速存储器，用于存储频繁访问的数据和指令。缓存分为L1、L2和L3级别。级别越低越接近CPU，速度越快，同时成本越高。\n\n![图片](../image/weixiu/cpuz_cache.png)\n\n- **制程工艺（Process Technology）**：制程工艺是指制造CPU时使用的半导体工艺技术，通常以纳米（nm）为单位。制程工艺越先进，CPU的性能和能效通常越好。\n\n- **TDP（Thermal Design Power）**：TDP是指CPU在最大负载下的热量设计功耗，以瓦特（W）为单位。TDP越低，CPU的发热量越小，散热要求也越低。\n- ##### 关于TDP的拓展学习\n  - 【【硬核科普】CPU和显卡的TDP指的是什么？和功耗是什么关系？】 https://www.bilibili.com/video/BV12L411976B/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88\n  - <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=438970756&bvid=BV12L411976B&cid=1072646531&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n  \n#### CPU的选择和对比--天梯图\n\n看到这里对CPU的性能介绍有个基本的了解，但是刚开始接触难免会没有什么概念，那么要怎么才能快速的知道CPU性能在哪个档次呢？AMD与Intel同价位下的性能差多少呢？  \n    \n- 我们可以借助CPU天梯图来快速了解CPU的性能\n    - [桌面端CPU天梯图](https://www.mydrivers.com/zhuanti/tianti/cpu/index.html) \n    - [笔记本端CPU天梯图](https://www.mydrivers.com/zhuanti/tianti/cpum/index.html)\n  \n或者你平常打游戏也可以直接上B站搜这款CPU在你玩的游戏里面多少帧率（不玩游戏的同学也可以用主流游戏的帧率来对比性能）。\n\n#### 市场上充斥着各种各样的CPU买哪一个好呢？-选购建议\n由于电脑市场上的快速换代每次研究都要花费很多时间，为了快速了解到市场的行情我推荐你们可以关注微信公众号`电脑吧评测室`，**选择装机推荐栏下的月度装机推荐**，与此同时该公众号也有很多很优秀的小推文可以去学习。**后续提到的硬件选购也都适用**\n\n![图片](../image/weixiu/diannaoba.png)\n\n- 该公众号会整理各个区间的价格并且会推荐目前性价比高的CPU给你，这样就能少踩坑很多。\n\n![图片](../image/weixiu/diannaobacpu.png)\n\n\n- 选购CPU或者其他硬件的时候都离不开以下几点。\n    1. 确定需求：根据自己的需求选择自己合适的CPU，例如说你有游戏、剪辑、修图等就需要比较高性能的CPU。\n    2. 确定预算：根据自己的需求选择合适的CPU，性能好的CPU通常也越贵。对于预算不是很足的同学来说可以选择从高销量高口碑的商家购买散片通常会比盒装版CPU便宜很多，但是售后通常都是店家保固。\n    3. 兼容性：确保所选的CPU要和主板相互兼容， 包括插槽的类型（LGA 1700、AM4等等）和芯片组，主板后续会再介绍。如果想省时间可以购买板U套餐（CPU主板捆绑销售）。\n    4. 功耗和散热：性能强的CPU需要更好的散热器来去推动，后续会再介绍散热对性能的影响。\n\n\n#### CPU的组装\n\n可以先看视频的介绍后续可以带你们实操。\n\n##### Intel CPU安装\n\n【【装机教程P3】intel CPU的安装方法】 https://www.bilibili.com/video/BV1Ue4y1T7KD/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=648624234&bvid=BV1Ue4y1T7KD&cid=918302942&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n\n##### AMD CPU安装\n\n【【装机教程P2】AMD CPU的安装方法】 https://www.bilibili.com/video/BV1hg411J7Zv/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88\n\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=518541177&bvid=BV1hg411J7Zv&cid=918301379&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n---\n   \n### 内存（RAM）\n\n- 内存第一个作用是用来暂存处理器（CPU）的运算数据，不管是正在处理，还是将要处理，亦或者是处理完成的数据，都会同时存在于内存里。\n\n- 第二个作用是和固态硬盘、机械硬盘等外部存储器交换数据。内存就好比中转站一样拿来暂时保存这些要用到的数据，因为CPU处理的速度太快，而外存的速度对于CPU来说很慢为了提高工作效率就拿内存来做之间沟通的桥梁。\n\n想要了解内存的性能参数同样我们可以用[CPU-Z](https://www.cpuid.com/softwares/cpu-z.html)中的**内存一栏**来查询。\n\n![图片](../image/weixiu/Memory/cpu-z内存.png)\n\n以及用**SPD（串行存在检测）**一栏用来保存一些厂商内存频率、CL值等等的预设的后面会再介绍。我们可以用这一栏看我们主板上的插槽所对应的内存参数\n\n![图片](../image/weixiu/Memory/cpu-zspd.gif)\n\n可以看到我这里在插槽2与4查了两根DDR4 8G 3200Mhz的内存，还有两个插槽是空的。由此可以看得出你内存的可用插槽有多少，方便后续升级。\n\n\n#### 内存？外存？\n\n- 相信仍然有很多同学容易混淆这两者，内存指的是随机存储器，断电后会丢失数据，作为CPU与外存沟通之间的桥梁。我们可以简单的用任务管理器去查看内存的简要信息。\n![图片](../image/weixiu/Memory/task.png)\n\n- 外存又名存储是真正可以拿来长期保存数据的容器，就是我们常说的固态硬盘、机械硬盘、软盘等等。\n![图片](../image/weixiu/Memory/存储.png)\n\n#### 内存的性能参数\n\n内存的主要参数有DDR几、容量、频率、接口和内存时序。以我的内存为例`DDR4 16G 3200Mhz CL18`。\n\n##### DDR\n\n- 同样我们用的内存也经过了很多次改良迭代，包括DDR、DDR2、DDR3、DDR4和最新的DDR5。每一代DDR内存都提供了更高的频率和更低的功耗，从而提高了计算机的性能。\n\n那么有什么区别呢？\n\n1. 每一代内存的缺口处位置都不同（我们常称防呆控孔）\n  ![图片](../image/weixiu/Memory/DDRVS.jpg)\n2. 降低的电压、延迟，提高频率、带宽\n  - DDR：第一代DDR内存，频率通常在200MHz左右。（已淘汰）\n    DDR2：第二代DDR内存，频率通常在400MHz左右，并引入了更低的电压。（已淘汰）\n    DDR3：第三代DDR内存，频率通常在800MHz以上，并进一步降低了电压。（已淘汰很少见）\n    DDR4：第四代DDR内存，频率通常在1600MHz以上，并继续降低电压。（主流）\n    DDR5：第五代DDR内存，频率通常在3200MHz以上，并引入了新的内存架构和更高的带宽。（未来主流）\n\n###### DDR4对比DDR5的拓展学习\n\n- 这里我们只对DDR1、2、3代作为了解，主流的DDR4、DDR5才是我们接触最多的。\n\n【最新的DDR5内存比DDR4强多少？单条真的是双通道吗？【翼王】】 https://www.bilibili.com/video/BV1TS4y1N7ee/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88\n\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=683135076&bvid=BV1TS4y1N7ee&cid=574672119&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n【不是贵的才是对的 DDR5 VS DDR4内存超频游戏测试 20款游戏3种分辨率告诉你搭配12代酷睿内存超频能为游戏带来多少提升？】 https://www.bilibili.com/video/BV1Gr4y1i7vN/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88\n\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=765692442&bvid=BV1Gr4y1i7vN&cid=484686310&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n---\n\n##### 容量\n\n顾名思义越大越好，当然也就越贵，内存的大小会直接影响系统的整体性能，对于计算机的专业的同学来说使用`windows 11`的操作系统，考虑到后续你们要玩虚拟机、要修图、要剪辑什么的，我会推荐你们买16G以上的内存（8Gx2组双通道或以上）。\n\n- 可以用`CPU-Z的SPD`来查询你电脑有几个插槽。\n- 在CMD下查询主板最大内存支持，具体操作如下：\n  1. 在电脑Win+R键呼出运行，输入`cmd`回车；\n  ![图片](../image/weixiu/Memory/CMD.png)\n  1. 敲入`wmic memphysical get maxcapacity` 得到的是以KB为单位\n   ![图片](../image/weixiu/Memory/最大内存.gif)\n  2. 例如我这里的是134217728KB把它转换成GB就是134217728/1024得到MB再/1024得到128GB，那就是说我电脑主板支持的最大容量是128GB。\n\n##### 通道数\n- 单条32G是不是一定比16G（8Gx2）快？，如果是相同频率，和延迟的情况下，论容量而言32G可以同时放入更多的需要被加载的数据到内存。但是单通道（64bit）和双通道（128\\~256bit），双通道可以完整的让CPU的发挥出它该有的性能，理论上是有2\\~4倍的性能提升，所以我更推荐你们组双通道，容量够用就好了。\n\n###### 通道数的拓展学习\n\n【【硬核科普】为什么买内存推荐买8GX2而不是16GX1？详解内存双通道工作原理与作用】 https://www.bilibili.com/video/BV1UJ411B7mD/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88\n\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=77644266&bvid=BV1UJ411B7mD&cid=132824884&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n###### 怎么看自己是不是双通道？\n\n- 我们可以用`CPU-Z`内存栏查看，例如我的电脑就是跑在2x64bit=128bit的双通道下，单通道就显示1x64bit或者直接就是64bit。\n![图片](../image/weixiu/Memory/cpu-z内存通道.png)\n\n###### 主板上那么多插槽怎么插才能组双通道呢？\n\n![图片](../image/weixiu/Memory/主板插双通道.jpg)\n\n- 要插双通道就得要准备好两条最好是同型号同参数的内存，不同的参数可能会出问题。\n- 如果要插双通道，通常都是插1-2插槽或者3-4插槽这样插。\n  \n\n**需要注意的是**：\n1. 那我插满4个不就4通道，速度飞起？当然不是我们普通家用机最大只支持双通道而四通道在工作站级别才有，工作站主板通常有八个内存插槽四个通道数，PCI总线也更多等等，当然价格也更贵。\n2. 不同主板的最推荐的插法不一，请按照主板的说明来插是最佳的。例如以下图片的主板。\n\n![图片](../image/weixiu/Memory/主板插优先双通道.jpg)\n\n- 关于安装双通道的拓展学习\n  【【硬核科普】为什么装机内存条推荐安装到第24槽而不是13槽？为什么ITX主板超频内存更容易？】 https://www.bilibili.com/video/BV19A411a7sC/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88\n\n  <iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=329013033&bvid=BV19A411a7sC&cid=217206371&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n---\n\n##### 内存频率\n- 内存频率是指内存模块的工作频率，通常以MHz（兆赫兹）为单位。内存频率越高，数据传输速率越快，从而提高计算机的运行速度。内存频率通常与CPU和主板兼容，选择合适的内存频率可以确保系统的稳定运行。\n\n\n##### JEDEC频率与XMP\n\n![图片](../image/weixiu/Memory/jedec.png)\n\n像是非JEDEC标准频率的内存都是厂商超频的内存需要在BIOS里面开启XMP才可以达到厂商所标称的内存频率。\n需要注意的是需要主板支持XMP内存超频的功能。\n\n- XMP的拓展学习\n【【硬核科普】高频内存为什么一定要打开XMP？详解内存条的SPD与XMP】 https://www.bilibili.com/video/BV1r54y1r7Tf/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88\n\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=842674996&bvid=BV1r54y1r7Tf&cid=252473424&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n  \n\n###### 如何开启XMP？-初识BIOS\n- 开启XMP通常需要进入BIOS设置，找到内存设置选项，然后选择XMP或Extreme Memory Profile选项，并选择相应的配置文件。不同的主板和BIOS版本可能有不同的设置方式，建议参考主板说明书或官方网站的说明。\n1. 进入BIOS：重启计算机，在启动过程中按下BIOS设置键（通常是DEL、F2或F10键）。\n找到内存设置选项 ：在BIOS设置中找到内存设置选项，通常位于“Advanced”或“Chipset”菜单下。\n2. 选择XMP或Extreme Memory Profile选项 ：在内存设置选项中，找到XMP或Extreme Memory Profile选项，并选择相应的配置文件。\n保存设置并退出BIOS：保存设置并退出BIOS，计算机将自动应用XMP配置。\n\n\n###### BIOS的拓展学习-重要！\n【学习重灌/超频之前 先来认识BIOS吧! UEFI 又是什么? | 聊电Jing】 https://www.bilibili.com/video/BV11W411m7gS/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88\n\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=32870815&bvid=BV11W411m7gS&cid=57521927&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n\n【97%使用者可能会用到的6个BIOS功能! 华硕 微星 技嘉 BIOS 使用全指南! | 聊电Jing】 https://www.bilibili.com/video/BV1jb411A76B/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88\n\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=35364008&bvid=BV1jb411A76B&cid=61985069&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n影片第15分钟会介绍XMP怎么开启建议全看完。\n\n\n ##### 延迟(CL值)\n- CL（CAS Latency，列地址选通延迟）是内存时序中的一个重要参数，它表示内存模块在接收到列地址后，需要等待多少个时钟周期才能开始读取数据。CL值越低，内存的访问速度越快，从而提高计算机的性能。\n\n![图片](../image/weixiu/Memory/CL值.png)\n\n##### CL值与频率的联系\n- 若有两个内存，要怎么知道这两者哪个性能更好呢？\n1. DDR4 8G 3200Mhz CL16\n2. DDR4 8G 3600Mhz CL17\n\n我们可以引入计算真实延迟的公式：\n\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><mo>真实延迟时间</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>C</mi><mi>L</mi><mo>值</mo><mrow><mo>/</mo></mrow><mo>频率</mo><mo>∗</mo><mn>2000</mn></math>\n\n`DDR4 8G 3200Mhz CL16`套入上面公式，我们计算出真实延迟是10ns。\n而`DDR4 8G 3600Mhz CL17`计算出来的真实延迟是9.4ns。\n由此得出延迟低的`DDR4 8G 3600Mhz CL17`性能是要优于`DDR4 8G 3200Mhz CL16`的。\n大家可以上jd或者淘宝多练习计算。\n\n- 其他更多关于内存延迟的参数可以自行去研究。\n\n【超频内存前必看! 频率与时序的关系? 原来可以用公式计算!】 https://www.bilibili.com/video/BV1Wt411s7Zt/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88\n\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=40256684&bvid=BV1Wt411s7Zt&cid=70703127&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n\n##### 内存-选购建议\n- 一样都是可以看[电脑吧公众号](#市场上充斥着各种各样的CPU买哪一个好呢？-选购建议)来去选购\n\n![图片](../image/weixiu/Memory/diannaoba内存.png)\n\n确定需求 ：根据需求选择合适的内存容量和频率。计算机专业的同学推荐选到16G以上，频率在兼容性和预算综合考虑最佳即可。\n兼容性 ：确保所选内存与主板兼容，包括内存类型和插槽类型。\n**需要注意的是**：如果买高频内存请确保你的主板支持XMP功能且与CPU等级挂钩。可以上主板官网去查询，例如[MAG B460 TOMAHAWK](https://tw.msi.com/Motherboard/MAG-B460-TOMAHAWK/Specification)。\n![图片](../image/weixiu/Memory/B460.png)\n若我用I7/I9级别的那我XMP最高可以开到2933Mhz，同理我用i5以下的就最高只能到2666Mhz。\n\n\n##### 内存条的安装\n\n【【装机教程P4】内存条的安装方法】 https://www.bilibili.com/video/BV1fD4y1h7aK/?share_source=copy_web&vd_source=141efb301e87945ebfb614f57c347f88\n\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=733545707&bvid=BV1fD4y1h7aK&cid=918305407&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n\n","categories":["university"]},{"title":"AI与区块链选修期中指南","url":"/2024/04/21/AI与区块链期中指南/","content":"\n## 前言\n- 介于很多同学没接触过AIGC的工具不知道该怎么去完成该考试\n- 前期我试过国内的一些模型感觉都不如DALLE3好用，但使用这个服务对于通过考试来说很贵，这里将告诉你怎么样用最低的成本来通过考试\n- 这里将提供购买渠道以及应用平台\n- 以下将作为指南去帮助你通过期中考试\n#### 如果你不想花钱就找免费的AIGC工具\n- 例如[讯飞星火](https://xinghuo.xfyun.cn/)或者[LiblibAI·哩布哩布AI ](https://www.liblib.art/)以及[智谱清言](https://chatglm.cn/) 等等，都可以帮助你完成期中考试，工具不限。如果想省麻烦的可以用DALLE3。\n<!--more-->\n## 获取GPT4的API\n- 这里推荐一家淘宝商家，并且商议好给我们更优惠。\n- 我承诺这里没有向你们获得任何利益\n这里附上与商家商议的截图\n- 原价2元跟跟商家商议后可以用1.7元买到\n![图片](../image/AIexam/2.png)\n![图片](../image/AIexam/8.png)\n扫码进群即可购买\n![图片](../image/AIexam/9.jpg)\n购买后将获得一串Sk开头的数字\n这一串数字就是GPT4.0的API\n\n\n## 搭配质谱AI与DALLE 3模型\n- 由于购买的GPT4.0余额有限可以搭配质谱AI来使用[质谱AI链接](https://open.bigmodel.cn/)\n1.注册账号\n![图片](../image/AIexam/3.png)\n注册好之后将免费体验一个月无需认证\n2.立即体验\n![图片](../image/AIexam/4.png)\n3.按照其中考试要求简单描述让质谱AI来补足细节\n![图片](../image/AIexam/6.png)\n![图片](../image/AIexam/5.png)\n自己稍做修改\n4.让质谱AI生成DALLE3指令\n![图片](../image/AIexam/7.png)\n### 模型平台应用\n1.复制这段指令到我提供的模型平台上\n[点击访问Lobe平台](https://lobe.xiaoai.plus/)\n[备用链接](http://info.stayrabbit.top:3210/)\n2.点击设定\n![图片](../image/AIexam/9.png)\n![图片](../image/AIexam/10.png)\n3.这里填入商家给你sk-xxx开头的APIkey\n![图片](../image/AIexam/11.png)\n- 这里填入https://api.xiaoai.plus/v1\n![图片](../image/AIexam/12.png)\n- 然后检查模型是否可用\n![图片](../image/AIexam/13.png)\n- 添加GPT-4-TurboPreview-1106\n![图片](../image/AIexam/14.png)\n4.点击交互界面插件选择DALLE3和GPT-4-TurboPreview-1106\n  ![图片](../image/AIexam/15.png)\n  ![图片](../image/AIexam/16.png)\n- 将质谱AI给的指令复制到对话框稍等片刻即可生成\n### 大功告成！\n将生成的图片保存完成考试吧！\n  ![图片](../image/AIexam/17.png)","categories":["university"]},{"title":"关于Liunx安全管理与加固","url":"/2024/04/20/关于Liunx安全管理与加固/","content":"\n## 前言\n- 介于上次被一个陌生的德国ip入侵之后不得已重置整个系统，所有已经部署的业务都得重来。由此可见做好安全管理多么重要！\n- 以下一些常见的操作来增加系统安全防止被恶意入侵\n- 系统环境：Debian 12\n\n\n\n### 保持系统最新\n\n\n1. 更新软件源并升级所有软件包\n```bash\n\nsudo apt update && sudo apt upgrade -y\nsudo apt dist-upgrade -y\n```\n\n2. 清理旧内核和无用包\n```bash\nsudo apt autoremove --purge\n```\n\n3. 启用自动安全更新\n```bash\nsudo apt install unattended-upgrades\nsudo dpkg-reconfigure -plow unattended-upgrades  # 选择\"Yes\"启用\n```\n- 选择\"Yes\"启用\n![图片](../image/linuxse/autoupdate.png)\n\n\n\n\n### Linux 防火墙配置\n- 开启防火墙，将不必要的端口关闭，缩小需要防范的范围。\n- 关于如何配置可以看我这篇文章[Linux UFW防火墙使用教程](https://blog.nyc1.xyz/2024/03/18/Linux%20UFW%E9%98%B2%E7%81%AB%E5%A2%99%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/)，里面有详细的介绍。\n\n\n### Linux SSH服务安全\n#### 备份\n- 记得备份好你的SSHD的配置文件以防万一\n```bash\n# cp /etc/ssh/sshd_config /etc/ssh/backup.sshd_config\n```\n#### OpenSSH的路径\n- OpenSSH 服务的配置文件路径为 /etc/ssh/sshd_config ，要配置它，必须得使用系统管理员（ root ）权限或使用 sudo 命令临时获得的管理员权限。\n- 配置信息大概长这样的[链接](https://blog.nyc1.xyz/2024/03/18/SSHD%E9%85%8D%E7%BD%AE%E7%9A%84%E8%A7%A3%E9%87%8A/)\n \n这里默认你已经会用编辑工具没有的话请安装VIM\n```bash\n# apt-get install vim\n```\n#### 编辑配置文件\n- 准备好就直接编辑\n```bash\n# vim /etc/ssh/sshd_config\n```\n<!--more-->\n\n#### 重载使新配置生效\n当配置更改完成，重启 SSH 后台服务使新的配置生效。\n```bash\nsudo systemctl reload sshd\n```\n\n#### 关于SSH配置\n##### 禁用Root用户登录\n1. 添加其他用户\n- 在此之前建议你先新增一个用户相关命令可以看[菜鸟教程中的useradd的命令](https://www.runoob.com/linux/linux-comm-useradd.html)\n  ```bash\n  useradd -m username //username指的是用户名\n  ```\n\n2. 在刚刚创建的用户修改其密码\n\n- [passwd命令](https://www.runoob.com/linux/linux-comm-passwd.html)\n```bash\npasswd username\n```\n\n- 输入两遍密码后即成功修改\n\np.s.在添加用户的时候有些小问题例如切换用户不显示路径以及用户名可以查阅[这篇](https://www.shnne.com/post/510.html)\n\n##### Linux 安装以及配置Sudo\n1. 安装sudo\n```bash\n# apt-get install sudo\n```\n2. 修改 /etc/sudoers 文件属性为可写\n[chmod命令](https://www.runoob.com/linux/linux-comm-chmod.html)\n```bash\n# chmod u+w /etc/sudoers\n```\n3. 编辑sudo配置文件\n```bash\n# vim /etc/sudoers\n```\n然后找到root ALL = (ALL) ALL这一行，在下一行加入username ALL = (ALL) ALL。username指代你想加入sudo组的用户名。\n![图片](../image/linuxse/1.png)\n4. 修改/etc/sudoers 文件属性为只读\n```bash\n# chmod u-w /etc/sudoers\n```\n第二种方法:\n直接执行命令添加用户到 sudo\n登录后复制\n```bash\n# usermod -a -G sudo stayrabbit    //注意改成你自己的用户名\n```\n##### 修改SSH配置文件\n- Linux 系统应该禁止 root 用户登录，因为这是有风险的，其不会留下审计信息。这就是 sudo 机制存在的原因。\n\n如果系统添加了 sudo 用户，最好使用 sudo 用户通过 ssh 连接，而不是 root 用户。\n\n要禁止 root 用户通过 ssh 访问，可以修改 PermitRootLogin 选项为 no：\n```bash\n# PermitRootLogin no\n```\n##### 禁用空密码\n在 Linux 中，用户账户可以不设置任何密码（或者为空密码）。这些用户尝试使用 ssh，也不需要密码。\n\n这是一个极大的安全隐患，我们应该禁止使用空密码。方法是在配置文件 /etc/ssh/sshd_config 中，将 PermitEmptyPasswords 选项配置为 no：\n```bash\nPermitEmptyPasswords no\n```\n![图片](../image/linuxse/2.png)\n\n##### 修改ssh的默认端口\nssh 的默认端口为 22，大多数攻击脚本都是围绕这个端口写的。更改这个默认端口会增加 ssh 的安全性，因为会极大的减少攻击者的数量。\n\n在配置文件中搜索端口信息，并将其更改为其他值\n\n请注意！在此之前先将对应端口防火墙打开\n以防连接不上在默认的22基础上加上你刚刚添加的端口，用该端口连接上之后再将`Port 22`注释掉\n可以参考这篇[\"iptables 禁止除22端口外其他所有端口\"](https://blog.csdn.net/qq_44273583/article/details/116661747)\n![图片](../image/linuxse/3.png)\n和这篇[\"iptables允许22端口访问\"](https://juejin.cn/s/iptables%E5%85%81%E8%AE%B822%E7%AB%AF%E5%8F%A3%E8%AE%BF%E9%97%AE)\n或者你觉得iptables麻烦可以参考我这篇[Linux UFW防火墙使用教程](https://blog.nyc1.xyz/2024/03/18/Linux%20UFW%E9%98%B2%E7%81%AB%E5%A2%99%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/)\n用`netstat -antp`命令来检查开放的端口\n```bash\nPort 22\nPort 10086\n```\n修改完成后需要记住你修改的端口（毕竟你还需要使用这个端口来登录的）\n\n##### 禁用 ssh 协议 1\n如果你使用的是比较旧的 Linux 版本，在某些低版本的 ssh 可能仍然有 ssh 协议 1 可用，该协议存在已知的漏洞，不能再使用。\n\n较新版本的 ssh 会自动启用 ssh 协议 2，可以检查一下该配置：\n```bash\n# Protocol 2\n```\n\n##### 配置空闲超时间隔\n空闲超时间隔是 ssh 连接可以在没有任何活动的情况下保持活动状态的时间。这种空闲会话也是一种安全风险，所以需要配置合适的空闲超时时间间隔。\n\n超时间隔以秒为单位，默认值是0。我们可以将其更改为300，即保持 5 分钟的超时间隔。\n```bash\nClientAliveInterval 300\n```\n在此间隔之后，ssh 服务器将向客户端发送一条活动消息。如果没有得到响应，连接将关闭，最终用户将注销。\n还可以配置在断开连接之前，发送活动消息的次数：\n```bash\nClientAliveCountMax 2\n```\n##### 禁用 X11 转发\n\nX11 或 X 显示服务器是图形环境的基本框架。X11 转发允许您通过 ssh 使用 GUI 应用程序。\n\n基本上，客户机在服务器上运行 GUI 应用程序，但由于 X11 转发，机器之间打开了一个通道，GUI 应用程序旧显示在了客户机上。\n\n基于此，X11 协议是有安全隐患的。所以如果不需要它，应该禁用 ssh 中的 X11 转发。\n```bash\nX11Forwarding no\n```\n##### 用户白板\n可以配置哪些用户允许通过 SSH 登录。这就是白板列表。仅白板列表里的用户可连接登录。白板之外的用户将被禁止  。来看下如何设置允许 `user` 用户通过 SSH 远程登录。 加入以下语句：\n```bash\nAllowUsers user\n```\n您想让谁 SSH 登录，别忘了加其用户名到 AllowUser（允许用户） 列表里。\n\n---\n\n#### 用私钥连接登录SSH\n1. 制作密钥对\n首先在服务器上制作密钥对。首先用密码登录到你打算使用密钥登录的账户，然后执行以下命令：\n```bash\nssh-keygen  //建立密钥对\n```\n![图片](../image/linuxse/4.png)\n现在，在 root 用户的家目录中生成了一个 .ssh 的隐藏目录，内含两个密钥文件。\nid_rsa 为私钥，id_rsa.pub 为公钥\n![图片](../image/linuxse/5.png)\n\n2. 在服务器上安装公钥\n键入以下命令，在服务器上安装公钥：\n```bash\n#cd .ssh\n#cat id_rsa.pub >> authorized_keys\n```\n如此便完成了公钥的安装。为了确保连接成功，请保证以下文件权限正确：\n```bash\n# chmod 600 authorized_keys\n# chmod 700 ~/.ssh\n```\n3. 设置 SSH，打开密钥登录功能\n编辑 `vim/etc/ssh/sshd_config` 文件，进行如下设置：\n\n```bash\nRSAAuthentication yes\nPubkeyAuthentication yes\n```\n然后重启 SSH 服务：\n```bash\n# service sshd restart\n```\n4. 将私钥下载下来利用winscp或者直接用`cat id_rsa` 复制下来\n用PuTTYGen工具\n![图片](../image/linuxse/8.png)\n选择Load Private Key将刚才复制下来的私钥加载进去\n然后点保存\n![图片](../image/linuxse/7.png)\n后续当你使用 PuTTY 登录时，可以在左侧的 Connection -> SSH -> Auth 中的 Private key file for authentication: 处选择你的私钥文件，然后即可登录了，过程中只需输入密钥锁码即可。\n5. 保存好之后继续配置SSHD_config\n![图片](../image/linuxse/6.png)\n当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录：\n```bash\nPasswordAuthentication no\n```\n最后，重启 SSH 服务：\n```bash\n service sshd restart\n```\n\n<!--\n### denyhost服务\n- DenyHosts是Python语言写的一个程序软件，运行于Linux上预防SSH暴力破解的，它会分析sshd的日志文件（/var/log/secure），当发现重复的攻击时就会记录IP到/etc/hosts.deny文件，从而达到自动屏IP的功能。\n  \nDenyHost[下载链接](https://sourceforge.net/projects/denyhosts/files/denyhosts/)\nDenyHost的[Github](https://github.com/denyhosts/denyhosts)\n\n#### 安装denyhost\n下载好之后用winscp上传到服务器上\n![图片](../image/linuxse/9.png)\n\n1.解压\n[tar命令](https://www.runoob.com/linux/linux-comm-tar.html)\n```bash\ntar zxvf denyhosts-3.0.tar.gz\n```\n2.进入源文件目录\n```bash\ncd denyhosts-3.0\n```\n3.安装\n```bash\npython setup.py install\n```\n4.复制配置信息到`/etc`目录下\n```bash\ncp denyhosts.conf /etc\n```\n5.复制 daemon-control.dist\n```bash\ncp daemon-control-dist daemon-control\n```\n6.修改权限\n```bash\n# chown root daemon-control\n# chmod 700 daemon-control\n```\n\n#### 配置denyhost\ndenyHost的配置文件路径在`/etc/denyhosts.conf`下\n编辑配置文件\n```bash\nvim /etc/denyhosts.conf\n```\n配置文件的解释\n```json\nSECURE_LOG = /var/log/secure    # 监控的sshd日志文件，系统不同位置不同\nHOSTS_DENY = /etc/hosts.deny    # 屏蔽IP的记录文件\nPURGE_DENY = 7d                 # IP被屏蔽后，多久清除屏蔽记录(m-minutes,h-hours,d-days,w-weeks,y-years)\n                                # PURGE_DENY =  设置为空代表永远不清除\nPURGE_THRESHOLD = 3             # 某个host最多被清除的次数，如果清除次数超过这个值就不会再被清理了\n \nBLOCK_SERVICE  = sshd           # 阻止的服务名，默认是sshd，也可以设置FTP、SMTP等\n \nDENY_THRESHOLD_INVALID = 3      # 允许无效用户尝试失败次数(过了这个次数还是失败就加入屏蔽)\nDENY_THRESHOLD_VALID = 3        # 有效用户(普通用户)尝试失败次数\nDENY_THRESHOLD_ROOT = 3         # root用户尝试失败次数\nDENY_THRESHOLD_RESTRICTED = 1   # 设定denyhosts将屏蔽host写入到/etc/hsots.deny文件中\nWORK_DIR = /var/lib/denyhosts   # denyhosts工作数据目录\nHOSTNAME_LOOKUP=YES             # 是否做域名反解\nLOCK_FILE = /var/lock/subsys/denyhosts    # 将DenyHost启动的pid记录到LOCK_FILE中，已确保服务正确启动，防止同时启动多个服务\n       ############ THESE SETTINGS ARE OPTIONAL ############\nAGE_RESET_VALID=6h              # 普通有效用户登陆失败计数清零时间\nAGE_RESET_ROOT=6h               # root用户登陆失败计数清零时间\nAGE_RESET_RESTRICTED=25d        # /etc/hosts.deny文件清除数据时间\nAGE_RESET_INVALID=1d            # 无效用户登陆失败计数清零时间\n       ######### THESE SETTINGS ARE SPECIFIC TO DAEMON MODE  ##########\nDAEMON_LOG = /var/log/denyhosts # denyhosts日志默认存放路径\nDAEMON_SLEEP = 30s              # 当以后台方式运行时，每读一次日志文件的时间间隔\nDAEMON_PURGE = 1h               # 当以后台方式运行时，清除机制在hosts.deny中终止就条目的时间间隔，这个会影响PURGE_DENY参数\n```-->\n\n\n## 参考\n\n1.[如何配置安全的 SSH 服务？（OpenSSH 安全必知必会）](https://learnku.com/server/t/36120)\n2.[可以提高 ssh 安全性的几个配置|TIAP](https://mp.weixin.qq.com/s/Qjx3dEHfTTzpXoBvJPcG3w)\n3.[设置 SSH 通过密钥登录|runoob](https://www.runoob.com/w3cnote/set-ssh-login-key.html)\n4.[SSH服务详解(二)--使用私钥登录 SSH 服务器(免密登录)|CSDN](https://blog.csdn.net/tyustli/article/details/122222605)\n5.[DenyHosts 简单使用 |cnblog](https://www.cnblogs.com/suguangti/p/12952210.html)","tags":["Linux"],"categories":["study"]},{"title":"AI与区块链选修第九章测验图解","url":"/2024/04/15/AI与区块链选修第九章测验图解/","content":"\n## 前言\n\n- 在学习通上老师给的解析还不够详细仍然缺少了些细节\n\n- 这里将一步步拆解老师给的解析\n- 大家可以来使用我整理的数据集对于完成作业已经足够了    \n\n## 步骤\n\n- 打开[百度智能云网站](https://ai.baidu.com/easydl/)\n点击【立即使用】在【在线使用】【图像:文心大模型】这一弹出【选择模型类型】，列选择【物体检测】\n\n![图片1](../image/ai/1Weixin%20Screenshot_20240415204756.png)\n\n![图片2](../image/ai/2Weixin%20Screenshot_20240415205106.png)\n\n<!--more-->\n\n- 有账号就直接登录无账号就注册\n\n![图片3](../image/ai/3.3.png)\n\n-点击训练模型\n![图片3](../image/ai/3Weixin%20Screenshot_20240415205826.png)\n\n-填入个人信息其他复制粘贴就好\n\n模型名称:输入【垃圾识别】\n所属行业:【其他】\n行业描述:垃圾分类\n应用场景：【为批量图片自动打标签应用场景】\n业务描述:【为了解决垃圾分类问题】\n![图片4](../image/ai/4Weixin%20Screenshot_20240415210106.png)\n- 出现这个对话框不用理会直接点确定\n![图片4](../image/ai/Weixin%20Screenshot_20240415210148.png)\n\n- 这里勾选半监督按钮\n![图片4](../image/ai/5Weixin%20Screenshot_20240415211008.png)\n\n- 点击创建数据集\n  ![图片](../image/ai/6Weixin%20Screenshot_20240415211407.png)\n- 填入名称\n![图片](../image/ai/8Weixin%20Screenshot_20240415211521.png)\n- 点击创建并导入\n![图片](../image/ai/7Weixin%20Screenshot_20240415211621.png)\n\n- 配置成图片一样的\n![图片](../image/ai/9Weixin%20Screenshot_20240415211738.png)\n可以上传我提供的素材\n[下载](https://gitee.com/NYC1/temp/blob/master/%E7%AD%9B%E9%80%89.zip)\n\n上传好了就确认\n![图片](../image/ai/10Weixin%20Screenshot_20240415212604.png)\n\n静静等待他导入好\n![图片](../image/ai/11Weixin%20Screenshot_20240415212708.png)\n- 导入好之后点击左边的在线标注\n![图片](../image/ai/12Weixin%20Screenshot_20240415213018.png)\n点击标注\n![图片](../image/ai/13Weixin%20Screenshot_20240415213107.png)\n点击添加标签逐次添加学习通要求的 餐巾纸、快餐盒、易拉罐、空的塑料袋以及满的垃圾袋进标签\n![图片](../image/ai/14Weixin%20Screenshot_20240415213216.png)\n点击左上的的图标画一个矩形把包含的物体到方框内然后选择对于的标签\n![图片](../image/ai/15Weixin%20Screenshot_20240415213620.png)\n每个都这样一个一个添加完之后\n\n- 点击左侧的模型训练\n\n![图片](../image/ai/15Weixin%20Screenshot_20240415213826.png)\n选择已有模型\n![图片](../image/ai/16Weixin%20Screenshot_20240415213907.png)\n出现这个不用理会\n![图片](../image/ai/17Weixin%20Screenshot_20240415213944.png)\n注意：为了方便演示这里的标签是不完整的标签全选就好\n按照图片配置如下：\n![图片](../image/ai/18Weixin%20Screenshot_20240415214347.png)\n- 训练环境按照照片配置\n![图片](../image/ai/19Weixin%20Screenshot_20240415214444.png)\n然后开始训练就好\n\n\n- 静静等待他训练好大约要1.5个小时\n\n![图片](../image/ai/20Screenshot_20240415214544.png)\n\n- 训练完之后大概是这样的\n![图片](../image/ai/21Weixin%20Screenshot_20240415214706.png)\n\n## 检验\n上传一张带你所训练的模型的图片来检验一下准确性\n![图片](../image/ai/21Weixin%20Screenshot_20240415222208.png)\n\n保存下面的图片去试试\n![图片](../image/ai/images.jpg)","categories":["university"]},{"title":"利用gost中转隧道中转加密","url":"/2024/03/27/利用gost中转隧道中转加密/","content":"\n## 原脚本功能\n\n\n\n- 实现了systemd及gost配置文件对gost进行管理\n- 在不借助其他工具(如screen)的情况下实现多条转发规则同时生效\n- 机器reboot后转发不失效\n- 支持传输类型：\n  - tcp+udp不加密转发\n  - relay+tls加密\n\n## 此脚本新增功能\n\n\n\n- 增加了传输类型选择功能\n- 新支持传输类型\n  - relay+ws\n  - relay+wss\n- 落地机一键创建ss/socks5/http代理 (gost内置)\n- 支持多传输类型的多落地简单型均衡负载\n- ~~增加gost国内加速下载镜像~~（被恶意刷流量导致我损失，不再提供）\n- 简单创建或删除gost定时重启任务\n- 脚本自动检查更新\n- 转发CDN自选节点ip\n- 支持自定义tls证书，落地可一键申请证书，中转可开启证书校验\n\n开源来自[KANIKIG/Multi-EasyGost](https://github.com/KANIKIG/Multi-EasyGost)\ngost的脚本的安装命令\n\n<!--more-->\n\n## 中转机以及落地机部署环境\n- Debian/Ubuntu 命令\n```bash\n# apt update -y # Debian/Ubuntu 命令\n# apt install -y curl #Debian/Ubuntu 命令\n# apt install -y socat #Debian/Ubuntu 命令\n```\n- CentOS 命令\n```bash\n# yum update -y #CentOS 命令\n# yum install -y curl #CentOS 命令\n# yum install -y socat #CentOS 命令\n```\n\n## 部署\n\n- 所有落地机器跟中转机器都要安装且启动脚本\n\n```bash\n# wget --no-check-certificate -O gost.sh https://raw.githubusercontent.com/KANIKIG/Multi-EasyGost/master/gost.sh && chmod +x gost.sh && ./gost.s\n```\n\n- 再次运行本脚本只需要输入`./gost.sh`回车即可\n\n- ![图片](../image/gost/1.png)\n- 执行1即安装\n\n\n\n## 中转机配置\n\n以下仅供演示命令你也可以根据自己的需求使用它的功能\n- 执行\n```bash\n# ./gost.sh\n```\n- ![图片](../image/gost/1.png)  \n\n选择7\n\n- 在中转机当中需要将流量转发至落地机，所以我们这里一般选择2加密隧道流量转发\n![图片](../image/gost/2.png)\n\n- 一般我们这里选择ws转发传输类型\n![图片](../image/gost/3.png)\n\n- 根据安装提示配置本地端口&nbsp;(顾名思义本地上的端口指的是接收来自客户端流量的端口)\n- 目标(落地机)&nbsp;&nbsp;ip地址:目标端口(落地机的ip地址，端口指的是将被转发流量的端口发送到落地机的接收端口)\n  ![图片](../image/gost/zhongzhuan.png)\n\n## 落地机配置\n\n- 同样在落地机上执行\n```bash\n# ./gost.sh\n```  \n\n- ![图片](../image/gost/1.png)\n  \n\n选择7\n- 在落地机器中需要解密来自中转机的流量所以我们选择3\n![图片](../image/gost/2.png)\n\n\n- 根据安装提示配置本地端口&nbsp;(指的是本地接收来自中转机的端口)\n- 目标地址和端口:指向本地以及本地服务的端口\n![图片](../image/gost/luodi.png)\n\n## 参考\n- [KANIKIG/Multi-EasyGost](https://github.com/KANIKIG/Multi-EasyGost)","categories":["study"]},{"title":"OpenSSH服务器ssh_config","url":"/2024/03/18/SSHD配置的解释/","content":"\n## SSHD配置文件\n\n- 默认路径\n```bash\nSSH的配置文件路径：/etc/ssh/sshd_config\n```\n- 修改\n  \n```bash\nvim /etc/ssh/sshd_config\n```\n<!--more-->\n\n### 常用配置信息解释\n```bash\nPort 10086 //端口号默认22\n#AddressFamily any\n#ListenAddress 0.0.0.0\n#ListenAddress ::\n\n#HostKey /etc/ssh/ssh_host_rsa_key\n#HostKey /etc/ssh/ssh_host_ecdsa_key\n#HostKey /etc/ssh/ssh_host_ed25519_key\n\n# Ciphers and keying\n#RekeyLimit default none\n\n# Logging\n#SyslogFacility AUTH\nLogLevel INFO\n\n# Authentication:\n\n#LoginGraceTime 2m\nPermitRootLogin no  //設定限制root不能使用ssh登入\n#StrictModes yes\nMaxAuthTries 6   //最大允許認證次數\n#MaxSessions 10\n\n#PubkeyAuthentication yes\n\n# Expect .ssh/authorized_keys2 to be disregarded by default in future.\n#AuthorizedKeysFile\t.ssh/authorized_keys .ssh/authorized_keys2\n\n#AuthorizedPrincipalsFile none\n\n#AuthorizedKeysCommand none\n#AuthorizedKeysCommandUser nobody\n\n# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts\n#HostbasedAuthentication no\n# Change to yes if you don't trust ~/.ssh/known_hosts for\n# HostbasedAuthentication\n#IgnoreUserKnownHosts no\n# Don't read the user's ~/.rhosts and ~/.shosts files\n#IgnoreRhosts yes\n\n# To disable tunneled clear text passwords, change to no here!\n#PasswordAuthentication yes\nPermitEmptyPasswords no   //不允許空密碼\n\n# Change to yes to enable challenge-response passwords (beware issues with\n# some PAM modules and threads)\nChallengeResponseAuthentication no\n\n# Kerberos options\n#KerberosAuthentication no\n#KerberosOrLocalPasswd yes\n#KerberosTicketCleanup yes\n#KerberosGetAFSToken no\n\n# GSSAPI options\n#GSSAPIAuthentication no\n#GSSAPICleanupCredentials yes\n#GSSAPIStrictAcceptorCheck yes\n#GSSAPIKeyExchange no\n\n# Set this to 'yes' to enable PAM authentication, account processing,\n# and session processing. If this is enabled, PAM authentication will\n# be allowed through the ChallengeResponseAuthentication and\n# PasswordAuthentication.  Depending on your PAM configuration,\n# PAM authentication via ChallengeResponseAuthentication may bypass\n# the setting of \"PermitRootLogin without-password\".\n# If you just want the PAM account and session checks to run without\n# PAM authentication, then enable this but set PasswordAuthentication\n# and ChallengeResponseAuthentication to 'no'.\nUsePAM yes\n\n#AllowAgentForwarding yes\n#AllowTcpForwarding yes\n#GatewayPorts no\nX11Forwarding yes\n#X11DisplayOffset 10\n#X11UseLocalhost yes\n#PermitTTY yes\nPrintMotd no\n#PrintLastLog yes\n#TCPKeepAlive yes\n#UseLogin no\n#UsePrivilegeSeparation sandbox\n#PermitUserEnvironment no\n#Compression delayed\nClientAliveInterval 600   //SSH超時空閒超時時間600秒\nClientAliveCountMax 2     //允許超時次數\n#UseDNS no\n#PidFile /var/run/sshd.pid\n#MaxStartups 10:30:100\n#PermitTunnel no\n#ChrootDirectory none\n#VersionAddendum none\n\n# no default banner path\n#Banner none\n\n# Allow client to pass locale environment variables\nAcceptEnv LANG LC_*\n\n# override default of no subsystems\nSubsystem\tsftp\t/usr/lib/openssh/sftp-server\n\n# Example of overriding settings on a per-user basis\n#Match User anoncvs\n#\tX11Forwarding no\n#\tAllowTcpForwarding no\n#\tPermitTTY no\n#\tForceCommand cvs server\n```","categories":["study","tech"]},{"title":"Linux UFW防火墙使用教程","url":"/2024/03/18/Linux UFW防火墙使用教程/","content":"\n## 安装\n\n### Ubuntu & Debian\n\n```bash\n# apt-get install ufw -y\n```\n\n### CentOS\n\nCentOS默认软件源不提供UFW，所以你需要安装EPEL软件源，运行以下命令：\n\n```bash\n# yum install epel-release -y\n```\n\n安装完成后使用以下命令安装UFW：\n\n```bash\n# yum install --enablerepo=\"epel\" ufw -y\n```\n\nUFW安装后，可以通过以下命令来启动UFW服务并使其在启动时启动（一般在完成默认配置后再重启）：\n\n```bash\n# ufw enable\n```\n\n如果运行ufw命令时报`Command Not Found`错误，可以使用`whereis ufw`来确定ufw的位置，之后你也可以顺手设置一下alias。\n接下来，使用以下命令检查UFW的状态，可以看到以下输出：\n\n```bash\n# ufw status \nStatus: active\n```\n\n还可以通过运行以下命令来禁用UFW防火墙（后面可以通过enable命令随时启用服务）：\n\n```bash\n# ufw disable\n```\n\n如果你决定要重新开始，则可以使用reset命令：\n\n```bash\n# ufw reset\n```\n\n这将禁用UFW并删除之前定义的任何规则。\n\n<!--more-->\n\n## 使用\n\n最新版的UFW默认启用了IPV6配置，你也可以通过以下命令进行检查，可以看到以下输出：\n\n```bash\n# cat /etc/default/ufw | grep -i ipv6\nIPV6=yes\n```\n\n如果输出为`IPV6=no`，可以使用vim编辑该文件将其改为yes。\n\n### 第一步：设置UFW默认策略\n\n默认情况下，UFW默认策略设置为阻止所有传入流量并允许所有传出流量，你可以使用以下命令来设置自己的默认策略：\n\n```bash\n# ufw default allow outgoing \n# ufw default deny incoming\n```\n\n如果现在重启机器（这会儿不要这么做），UFW配置会在重启后生效，它将拒绝所有传入的连接。因为我们没有允许SSH连接，这意味着，重启过后我们将无法远程连接到服务器。如果我们希望服务器响应这些类型的请求，我们就需要明确指定允许传入连接的规则 （例如SSH或HTTP连接）。\n\n### 第二步：设置SSH或其他规则\n\n要将防火墙配置为允许传入SSH连接，可以使用以下命令：\n\n```bash\n# ufw allow ssh\n```\n\n这将创建防火墙规则-允许端口22上的所有连接，这是SSH守护程序默认监听的端口，类似的快捷指令还有 `ufw allow http`、`ufw allow https`。\n\n实际上也可以通过直接指定端口来创建等效规则，下面这条命令将产生相同的结果：\n\n```bash\n# ufw allow 22\n```\n\n如果你的SSH守护程序配置在其他端口，则需要手动指定相应的端口。\n\n### 第三步：其他规则的设置\n\nUFW可以基于TCP或UDP协议来过滤数据包，命令如下：\n\n```bash\n# ufw allow 80/tcp\n# ufw allow 21/udp\n```\n\n之后使用以下命令检查已添加规则的状态，应该可以看到如下输出：\n\n```bash\n# ufw status verbose\nStatus: active\nLogging: on (low)\nDefault: deny (incoming), allow (outgoing), deny (routed)\nNew profiles: skip\nTo                         Action      From\n80/tcp                     ALLOW IN    Anywhere\n21/udp                     ALLOW IN    Anywhere\n80/tcp (v6)                ALLOW IN    Anywhere (v6)\n21/udp (v6)                ALLOW IN    Anywhere (v6)\n```\n\n还可以使用以下命令随时拒绝指定端口任何传入和传出的流量：\n\n```bash\n# ufw deny 80\n# ufw deny 21\n```\n\n如果要删除HTTP允许的规则，只需在原始规则前加上delete即可，如下所示：\n\n```bash\n# ufw delete allow http\n# ufw delete deny 21\n```\n\n也可以按编号删除规则，使用以下命令查看规则及其编号：\n\n```bash\n# ufw status numbered\nOutputStatus: active\n     To                         Action      From\n     --                         ------      ----\n[ 1] 22/tcp                     ALLOW IN    Anywhere\n[ 2] 443/tcp                    ALLOW IN    Anywhere\n[ 3] 22/tcp (v6)                ALLOW IN    Anywhere (v6)\n[ 4] 443/tcp (v6)               ALLOW IN    Anywhere (v6)\n```\n\n举个例子，要删除允许端口443上的HTTPS连接规则，也就是编号2（注意删除完规则后编号会更新）：\n\n```bash\n# ufw delete 2\n```\n\n在设置完规则后，重启机器即可完成UFW配置。\n\n\n## 验证UFW-nmap\n\n以我的服务器配置为例：\n开启了10086、443、80、36089端口\n![图片](../image/ufw/serverUfwStatus.png)\n\n这里我推荐使用一款热门的端口扫描工具[nmap](https://nmap.org/)来验证ufw是否生效。\n- 下载安装后，打开cmd，输入nmap查看是否安装成功。\n![图片](../image/ufw/nmapcheck.png)\n\n- nmap端口扫描常用的命令\n```bash\nnmap -T4 -A -v -Pn -p 1-65535 yourIP\t#最常用的一种扫描\n\n-T4\t\t#设置时序，越高扫描越快\n-A\t\t#启用操作系统检测，版本检测，脚本扫描和跟踪路由\n-v\t     #增加详细级别（使用-vv或更高级别以获得更好的效果）\n-Pn       #无ping扫描\n-p        #-p选项，只扫描指定的端口（1-65535）\n```\n详细可以参考nmap的[官方文档](https://nmap.org/man/zh/)\n\n- 我们这里只简单的测试端口是否开放则输入`nmap -T4 -sS -p 1-65535 yourIP` 命令\n![图片](../image/ufw/nmapchecking.png)\n- 稍等片刻便可以知道结果\n- ![图片](../image/ufw/nmapchecked.png)\n  可以从结果看出只有开放的端口被扫出，验证UFW生效。\n\n## 进阶用法\n\n### 特定端口范围\n\n某些应用程序使用多个端口而不是单个端口，你可能需要使用UFW指定端口范围，指定端口范围时，必须指定规则应适用的协议（ tcp或udp ）。\n例如，要允许使用端口9000-9002范围内的连接，可以使用以下命令：\n\n```bash\n# ufw allow 9000:9002/tcp\n# ufw allow 9000:9002/udp\n```\n\n### 特定的IP地址\n\n出于某些情况，你可能需要允许/禁用来自特定IP地址的连接，如下：\n\n```bash\n# ufw allow from 192.168.29.36\n# ufw deny from 192.168.29.36\n```\n\n还可以在UFW中允许IP地址范围,以下命令将允许从192.168.1.1到192.168.1.254的所有连接：\n\n```bash\n# ufw allow from 192.168.1.0/24\n```\n\n要允许IP地址192.168.29.36连接特定的端口80，可以运行以下命令：\n\n```bash\n# ufw allow from 192.168.29.36 to any port 80\n```\n\n进一步的，可以指定TCP/UDP：\n\n```bash\n# ufw allow from 192.168.29.36 to any port 80 proto tcp\n```\n\n来个复杂点的例子，\n\n```bash\n# ufw deny from 192.168.0.4 to any port 22 \n# ufw deny from 192.168.0.10 to any port 22 \n# ufw allow from 192.168.0.0/24 to any port 22\n```\n\n以上命令将会阻止从192.168.0.4和192.168.0.10访问端口22，但允许所有其他IP访问端口22。\n\n以上大致简述了UFW的基本使用，日常使用基本够用。除此之外，UFW还支持更多的高级特性例如允许与特定网络接口的连接、配置NAT等等，你可以通过查看帮助文档或者搜索引擎了解其他高级命令的使用。\n\n## UFW与Docker冲突的问题\n\nDocker配合UFW运作的解决方法\n现代问题需要现代手段，使用chaifeng撰写的ufw-docker指令稿能解决这问题。 他的 Github有详细原理解释，这边直接讲解法。\n\n如果已经修改过/etc/docker/daemon.json停用iptables，请将相关段落删除。\n\n编辑/etc/default/ufw，将DEFAULT_FORWARD_POLICY=\"ACCEPT\"修改为DEFAULT_FORWARD_POLICY=\"DROP\"。\n\n安装此指令稿修改UFW设定档，再重启UFW与Docker服务。\n```bash\n# sudo wget -O /usr/local/bin/ufw-docker https://github.com/chaifeng/ufw-docker/raw/master/ufw-docker\n\n# sudo chmod +x /usr/local/bin/ufw-docker\n\n# sudo ufw-docker install\n\n# sudo systemctl restart ufw\n\n# sudo systemctl restart docker\n```\n\n\n## 参考\n[简明教程｜Linux中UFW的使用](https://zhuanlan.zhihu.com/p/98880088)\n[启动、关闭和设置ubuntu防火墙 ufw 的使用](https://blog.csdn.net/chongdi2612/article/details/100733464)\n[你知道Docker會讓Linux的UFW防火牆失效嗎？用ufw-docker解決此問題](https://ivonblog.com/posts/fix-ufw-docker/)\n[Nmap参考指南(Man Page)](https://nmap.org/man/zh/)\n[nmap端口扫描 | 狼组安全团队公开知识库](https://wiki.wgpsec.org/knowledge/tools/nmap.html)","tags":["Linux"],"categories":["study","tech"]},{"title":"docker如何改变环境变量","url":"/2024/03/17/docker的一些命令/","content":"\n## 命令&步骤\n\n1. 关闭docker 服务\n\n```bash\n# systemctl stop docker \n```\n\n2.查看环境变量\n```bash\n# docker exec -it [container-id] env\n```\n\n- 查看Docker Root Dir: /apps/docker\n```bash\n# docker info\n```\n\n- 找到容器短id，再docker inspect [短id], 获取容器的长id：container-id\n\n```bash\n# dokcer ps\n```\n\n\n\n或者  \n```bash\n# vim var/lib/docker/containers/[container-id]/config.json\n```\n\n3.修改环境变量\n\n\n修改/var/lib/docker/containers/[container-id]/config.v2.json里对应的环境变量\n\n- 修改容器配置信息\n```bash\n# vim var/lib/docker/containers/[container-id]/config.v2.json  \n```\n\n4.然后重启docker服务\n  \n```bash\n# systemctl daemon-reload\n# systemctl restart docker  \n```\n\n\n","categories":["study","tech"]},{"title":"hexo的一些命令","url":"/2024/03/17/hexo/","content":"\n\n\n## 常用命令  \n\n- 创建和发布文章\n```\nhexo new “postName” 新建文章\n\nhexo new page “pageName” 新建页面\n```\n---\n\n- 一键部署命令\n\n```\nhexo clean && hexo g && hexo d\n```\n  \n\n> hexo clean == hexo c\n\n清除缓存 网页正常情况下可以忽略此条命令  \n\n\n> hexo generate == hexo g\n\n生效新增、修改、更新的文件  \n\n\n> hexo deploy == hexo d\n  \n\nhexo的一键部署功能，执行此命令即可将网站发布到配置中的仓库地址，执行此命令前需要配置站点配置文件_config.yml\n    \n\n<!--more-->\n\n- 网页头部设置   \n\n```\n网站顶部设置\n修改主题配置文件：\n\nheader:\n  enable: true\n  show_on:\n    # 在文章页面是否显示网站顶部\n    post: true\n  # 网站顶部的高度（设置为百分数，表示所占屏幕高度的百分比。支持所有 CSS 长度单位）\n  height: 80%\n  # 顶部背景图片\n  bg_image:\n    enable: false\n    # 填写图片路径或链接\n    url:\n  # 顶部背景图的遮罩效果\n  mask:\n    enable: false\n    # 透明度（取值：0 ~ 1）\n    opacity: 0.5\n  nav:\n    # 顶部导航栏的高度（支持所有 CSS 长度单位）\n    height: 50px\n    # 导航栏的背景颜色（吸顶时）\n    bg_color: \"#333\"\n  # 提示向下滚动的图标\n  scroll_down_icon:\n    enable: false\n    # 查找图标名称，请访问：https://fontawesome.com/icons\n    name: fas fa-angle-down\n    # 是否启用动画\n    animation: true\n ```\n\n\n## 其他\n---\n## init\n\n```\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\n本命令相当于执行了以下几步：\n\n1. Git clone [hexo-starter](https://github.com/hexojs/hexo-starter) 和 [hexo-theme-landscape](https://github.com/hexojs/hexo-theme-landscape) 主题到当前目录或指定目录。\n2. 使用 [Yarn 1](https://classic.yarnpkg.com/lang/en/)、[pnpm](https://pnpm.io/zh/) 或 [npm](https://docs.npmjs.com/cli/install) 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 [Node.js](https://hexo.io/zh-cn/docs/index.html#安装-Node-js) 安装。\n\n## new\n\n```\n$ hexo new [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 [_config.yml](https://hexo.io/zh-cn/docs/configuration) 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n```\n$ hexo new \"post title with whitespace\"\n```\n\n| 参数              | 描述                                          |\n| :---------------- | :-------------------------------------------- |\n| `-p`, `--path`    | 自定义新文章的路径                            |\n| `-r`, `--replace` | 如果存在同名文章，将其替换                    |\n| `-s`, `--slug`    | 文章的 Slug，作为新文章的文件名和发布后的 URL |\n\n默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 `index.md` 文件。你可以使用 `--path` 参数来覆盖上述行为、自行决定文件的目录：\n\n```\nhexo new page --path about/me \"About me\"\n```\n\n以上命令会创建一个 `source/about/me.md` 文件，同时 Front Matter 中的 title 为 `\"About me\"`\n\n注意！title 是必须指定的！如果你这么做并不能达到你的目的：\n\n```\nhexo new page --path about/me\n```\n\n此时 Hexo 会创建 `source/_posts/about/me.md`，同时 `me.md` 的 Front Matter 中的 title 为 `\"page\"`。这是因为在上述命令中，hexo-cli 将 `page` 视为指定文章的标题、并采用默认的 `layout`。\n\n\n## generate\n\n```\n$ hexo generate\n```\n\n生成静态文件。\n\n| 选项                  | 描述                                                         |\n| :-------------------- | :----------------------------------------------------------- |\n| `-d`, `--deploy`      | 文件生成后立即部署网站                                       |\n| `-w`, `--watch`       | 监视文件变动                                                 |\n| `-b`, `--bail`        | 生成过程中如果发生任何未处理的异常则抛出异常                 |\n| `-f`, `--force`       | 强制重新生成文件 Hexo 引入了差分机制，如果 `public` 目录存在，那么 `hexo g` 只会重新生成改动的文件。 使用该参数的效果接近 `hexo clean && hexo generate` |\n| `-c`, `--concurrency` | 最大同时生成文件的数量，默认无限制                           |\n\n该命令可以简写为\n\n```\n$ hexo g\n```\n\n## publish\n\n```\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n## server\n\n```\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n| 选项             | 描述                           |\n| :--------------- | :----------------------------- |\n| `-p`, `--port`   | 重设端口                       |\n| `-s`, `--static` | 只使用静态文件                 |\n| `-l`, `--log`    | 启动日记记录，使用覆盖记录格式 |\n\n## deploy\n\n```\n$ hexo deploy\n```\n\n部署网站。\n\n| 参数               | 描述                     |\n| :----------------- | :----------------------- |\n| `-g`, `--generate` | 部署之前预先生成静态文件 |\n\n该命令可以简写为：\n\n```\n$ hexo d\n```\n\n## render\n\n```\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n| 参数             | 描述         |\n| :--------------- | :----------- |\n| `-o`, `--output` | 设置输出路径 |\n\n## migrate\n\n```\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](https://hexo.io/zh-cn/docs/migration)。\n\n## clean\n\n```\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n\n## list\n\n```\n$ hexo list <type>\n```\n\n列出网站数据。\n\n## version\n\n```\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n## config\n\n```\n$ hexo config [key] [value]\n```\n\n列出网站的配置（`_config.yml`）。如果指定了 `key`，则只展示配置中对应 `key` 的值；如果同时指定了 `key` 和 `value`，则将配置中对应的 `key` 的值修改为 `value`。\n\n## 选项\n\n### 安全模式\n\n```\n$ hexo --safe\n```\n\n在安全模式下，不会加载插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n\n```\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new?assignees=&labels=&projects=&template=bug_report.yml)。\n\n### 简洁模式\n\n```\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n### 自定义配置文件的路径\n\n```\n# 使用 custom.yml 代替默认的 _config.yml\n$ hexo server --config custom.yml\n\n# 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高\n$ hexo generate --config custom.yml,custom2.json,custom3.yml\n```\n\n自定义配置文件的路径，指定这个参数后将不再使用默认的 `_config.yml`。\n你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：\n\n```\n# 使用 custom.yml 代替默认的 _config.yml\n$ hexo server --config custom.yml\n\n# 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json\n$ hexo generate --config custom.yml,custom2.json,custom3.yml\n```\n\n当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 `_multiconfig.yml`。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。\n\n### 显示草稿\n\n```\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n\n```\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。\n\n---\n\n更多查阅[Stun](https://theme-stun.github.io/docs/zh-CN/guide/quick-start.html)和[Hexo](https://hexo.io/zh-cn/docs/commands)官方文档","categories":["study","tech"]},{"title":"MarkDown的使用教程","url":"/2023/11/04/MarkDown的使用教程/","content":"\n# 学习Markdown by NgaiYeanCoi 2023.8.29更新\n\n\n---\n\n此篇是由NgaiYeanCoi整理编写出的Markdown教程，如有错误的请指出。  \nStayrabbit & NgaiYeanCoi是同一人。  \n全篇建议配合源代码一起阅读\n[点我查看源码](https://github.com/NgaiYeanCoi/NYC-Notes/blob/master/%E7%BC%96%E7%A8%8B%E7%B1%BB/Markdown/%E5%AD%A6%E4%B9%A0Markdown%E7%AC%94%E8%AE%B0.md?plain=1)  \n\n\n## 一、前言\n\n### 1.1 关于Markdown\n\n* Markdown是一种轻量标记语言,它可以让人们更容易读懂纯文本的文档说明\n\n* Markdown编写的文档可以导出为HTML、World、图像、PDF 等多种格式的文档\n\n* Markdown文档的后缀`.md` `.markdown`\n\n\n### 1.2 Markdown的应用\n\n+  Markdown可以用来写笔记、电子书\n\n+  目前很多网站都广泛使用Markdown来撰写帮助文档或者是用于论坛，例如：GitHub、简书等 \n\n\n### 1.3 Markdown的编辑器\n\n* Markdown存在有多种多样的编辑器，并没有哪种编辑器更好的说法，只有适合自己的编辑器。\n\n* 常见的Markdown编辑器有**Visual Studio Code**、**Typora**、**Obsidian**等\n\n## 二、Markdown的语法\n\n* Markdown 有着非常简洁的语法，不过由于它的自由性，Markdown 也产生了许多变体，如 GitHub Flavored Markdown (GFM) 和 Pandoc 。\n\n* 其他的暂且不讨论，先来看看Markdown 通用的基础语法。\n\n* 以下的语法基于 **VS Code** 与 **Markdown Preview Enhanced 插件** \n\n<!--more-->\n\n### 2.1 标题的写法\n\n* 标题的写法可以用\"#\"来表示标题的大小\n\n>\\# 一级标题  \n>\\## 二级标题  \n>\\### 三级标题  \n>\\#### 四级标题  \n>\\##### 五级标题  \n>\\###### 六级标题  \n\n例如一级标题：\n\n>\\#&nbsp;要输入的文本  \n\n---\n\n\n### 2.2 段落\n\n* Markdown段落没有特殊的格式段落跟段落之间要隔开一行，**段落的换行是使用两个以上空格加上回车**。    \n\n>段落一\\&nbsp;\\&nbsp;\n段落二  \n\n示例：  \n\n段落一  \n段落二\n\nP.S. 结合源代码来看\n\n---\n\n### 2.3 分割线\n\n* 分割线的写法可以用三条横线 `-`、星号 `*`、下划线 `_` 或者三条以上，**行内不能有其他东西**。  \n\n> \\---  \n> \\***  \n> \\___  \n> \\-----  \n> \\*****  \n\n示例：\n\n---\n\n* 你也可以在星号或是横线中间插入空格。  \n\n> \\* * *  \n> \\- - -  \n> \\_ _ _\n\n---\n\n### 2.4 字体格式\n\n* Markdown在使用的时候，我们需要**加粗**、*斜体*、***粗斜体*** 来让笔记更加的醒目跟美观。  \n\n#### 2.4.1 Markdown常用下面这几种字体 \n\n* 加粗文本  \n> \\*\\*文字**  \n\n示例：**文字**\n\n\n*  斜体文本\n> \\*文字*   \n\n示例：*文字*\n\n\n*  粗斜体文本 \n> \\*\\*\\*文字***  \n\n示例：***文字***\n\n\n#### 2.4.2 其他的字体\n\nMarkdown在使用的时候还会使用到 ~~删除线~~、<u>下划线</u> 、脚注的情况。\n\n*  删除线文本  \n> \\~~文字~~  \n\n示例：~~文字~~\n\n\n*  下划线文本  \n>\\<u>文字\\</u>\n\n示例：<u>文字</u>\n\n\n*  脚注文本  \n\n首先创建脚注 \n>\\[^定义脚注文本]  \n\n后面再创建跟前面创建的脚注补充说明的文字\n>\\[^定义脚注文本]:（补充文字）。\n\n示例：[^stayrabbit]  \n\n[^stayrabbit]:（`2.4.2`脚注的示例）\n\nP.S. 结合源代码来看\n\n---\n\n### 2.5 列表格式\n\n* Markdown 支持有序列表和无序列表列表，是记笔记时非常基本的元素。\n\n#### 2.5.1 无序列表\n\n* 无序列表使用星号`*`、加号`+`或是减号`-`作为列表标记，这些标记后面要添加一个空格，然后再填写内容。\n\n> \\* 第一项  \n> \\* 第二项  \n> \\* 第三项  \n\n> \\+ 第一项  \n> \\+ 第二项  \n> \\+ 第三项  \n\n> \\- 第一项  \n> \\- 第二项  \n> \\- 第三项  \n\n示例：\n* 第一项\n* 第二项\n* 第三项  \n\n\n#### 2.5.2 嵌套无序列表\n\n* 嵌套无序列表，嵌套列表需要再子列表选项中前面多加两个空格或者四个然后再填写内容。\n\n>*第一项  \n> &nbsp;&nbsp;*嵌套第一项  \n> &nbsp;&nbsp;*嵌套第二项  \n> &nbsp;&nbsp;*嵌套第三项  \n>*第二项  \n> &nbsp;&nbsp;*嵌套第一项  \n> &nbsp;&nbsp;*嵌套第二项  \n> &nbsp;&nbsp;*嵌套第三项\n\n\n示例：\n\n* 第一项\n  * 嵌套第一项\n  * 嵌套第二项\n  * 嵌套第三项  \n* 第二项\n  * 嵌套第一项\n  * 嵌套第二项\n  * 嵌套第三项\n\n\n#### 2.5.3 有序列表\n\n* 有序列表使用数字并加上`.` 号加上空格输入内容来表示。\n\n>1. 第一项  \n>2. 第二项  \n>3. 第三项\n\nP.S. `“.”`后面有空格\n\n示例：\n\n1. 第一项  \n2. 第二项\n3. 第三项\n\n\n#### 2.5.4 嵌套有序列表\n\n* 嵌套有序列表与[2.5.2](#252-嵌套无序列表)方法类似，嵌套列表需要再子列表选项中前面多加两个空格或者四个然后再填写内容。\n\n>1. 第一项  \n>&nbsp;&nbsp;1. 嵌套第一项  \n>&nbsp;&nbsp;2. 嵌套第二项  \n>&nbsp;&nbsp;3. 嵌套第三项  \n>2. 第二项  \n>&nbsp;&nbsp;1. 嵌套第一项  \n>&nbsp;&nbsp;2. 嵌套第二项  \n>&nbsp;&nbsp;3. 嵌套第三项  \n\n示例:\n\n1. 有序列表 1\n   1. 嵌套有序列表第一项\n   2. 嵌套有序列表第二项\n2. 有序列表 2\n   1. 嵌套有序列表第一项\n   2. 嵌套有序列表第二项\n\n#### 2.5.5 Markdown Preview Enhanced 拓展\n\n* 任务列表待办事项，基于Markdown Preview Enhanced插件的拓展任务列表\n  \n> \\* \\[ &nbsp;] 1. 未完成事情\n>\\* \\[ &nbsp;] 2. 未完成事情\n> \\* [X] 3. 已完成的事情\n\n示例:\n* [ ] 1. 未完成事情\n* [ ] 2. 未完成的事情\n* [x] 3.已完成的事情\n\n---\n\n### 2.6 区块引用\n\n* Markdown 区块引用是在段落开头使用 `>`符号 ，然后后面紧跟一个空格符号。\n\n\n> \\>&nbsp;引用文本test\n\n示例：\n\n> Stayrabbit:Hello World！\n\n\n#### 2.6.1 区块的嵌套\n\n*  区块跟列表一样是可以嵌套的，一个 `>` 符号是最外层，两个 `>` 符号是第一层嵌套，以此类推。\n\n> \\>&nbsp;第外层  \n> \\>\\>&nbsp;第一层嵌套   \n> \\>\\>\\>&nbsp;第二层嵌套  \n> \\>\\>\\>\\>&nbsp;第三层嵌套\n\n\n示例:\n> 最外层\n>> 第一层嵌套\n>>> 第二层嵌套  \n>>>> 第三层嵌套\n\n\n#### 2.6.2 区块中使用列表\n\n* 在区块中是可以使用列表的列表的规则请参照[2.5](#25-列表格式)的格式。\n\n> \\>区块中使用列表  \n> \\* 无序第一项  \n> \\* 无序第二项  \n> 1\\. 有序第一项  \n> 2\\. 有序第二项\n\n示例：\n\n>区块中使用列表示例\n> * 无序第一项  \n> * 无序第二项  \n> 1. 有序第一项  \n> 2. 有序第二项\n\n#### 2.6.3 列表中使用区块\n\n* 如果要在列表内放进区块，就需要在 > 前添加四个空格的缩进。\n\n> \\* 无序第一项  \n&nbsp;&nbsp;&nbsp;&nbsp;>区块第一项  \n&nbsp;&nbsp;&nbsp;&nbsp;>区块第二项  \n> \\* 无序第二项  \n&nbsp;&nbsp;&nbsp;&nbsp;>区块第一项  \n&nbsp;&nbsp;&nbsp;&nbsp;>区块第二项 \n\n示例：\n* 无序第一项  \n    > 区块第一项  \n    > 区块第二项\n* 无序第二项  \n    > 区块第一项  \n    > 区块第二项 \n\nP.S. 有序列表也类似请参考[2.6.3](#263-列表中使用区块)与[2.5](#25-列表格式)。\n\n---\n\n\n### 2.7 转义\n\n*  Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠`\\`转义特殊字符。  \n\n> \\\\ * \\\\* 文本字符 \\ \\*\\ \\*\n\n示例:\n> \\*\\*文本字符\\*\\*\n\n* Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号包括`\\`本身：\n\n>\\   反斜线\n>`   反引号\n> \\*   星号\n> _   下划线\n> {}  花括号\n> []  方括号\n> ()  小括号\n> \\#   井字号\n> \\+   加号\n> \\-   减号\n> \\.   英文句点\n> \\!   感叹号\n\nP.S. 转义在区块引用[2.6](#26-区块引用)中也是有效的。\n\n---\n\n\n### 2.8 代码\n\n* Markdown在写代码笔记或者在撰写帮助文档的时候，可以让其更加规范、简洁、易懂。\n\n#### 2.8.1 行内代码（片段的代码）\n\n* 如果是段落上的一个函数或片段的代码可以用反引号“ ` ”把它包起来。\n\n\n>\\`printf(\"Hello World\");`\n\n示例：\n`printf(\"Hello World\");`\n\n\n#### 2.8.2 代码块区块\n\n* Markdown可以用 “ ``` ” 来包围一段代码，并指定一种语言（也可以不指定）。\n\n> \\```C {.line-numbers} //指定一种语言例如C语言。{.line-numbers}表示显示代码行数（基于Markdown Preview Enhanced插件）\n> \\#include <stdio.h>\n> int main()\n> {\n> printf(\"Hello World\");\n> return 0;\n> }\n> \\```&nbsp; //引用结束\n\n示例:\n\n```C{.line-numbers}\n#include <stdio.h>\nint main()\n{\nprintf(\"Hello World\");\nreturn 0;\n}\n```\n\n* 或者你可以用第二种方法  \n* 代码块前后需要有至少一个空行，且每行代码前需要有至少两个`Tab`或四个空格。 \n\n>&nbsp;&nbsp;&nbsp;&nbsp;#include <stdio.h>//前面有四个空格\n&nbsp;&nbsp;&nbsp;&nbsp;int main()//前面有四个空格\n&nbsp;&nbsp;&nbsp;&nbsp;{//前面有四个空格\n&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Hello World\");//前面有四个空格\n&nbsp;&nbsp;&nbsp;&nbsp;return 0;//前面有四个空格\n&nbsp;&nbsp;&nbsp;&nbsp;}//前面有四个空格\n\n示例：  \n\n    #include <stdio.h>\n    int main()\n    {\n    printf(\"Hello World\");\n    return 0;\n    }\n\n---\n\n### 2.9 超链接\n\n* Markdown中的文本可以用下面的方式插入超链接\n\n> \\[超链接名称](超链接地址)\n\n\n<https://www.stayrabbit.top/>\n\n示例：\n\n[超链接](https://www.stayrabbit.top/)  \n\n- 或者可以直接引用链接\n\n> <超链接地址>\n\n示例：\n\n<https://www.stayrabbit.top/>\n\n\n#### 2.9.1 超链接的高级用法\n\n- Markdown还可以通过一个变量名称来设置一个超链接，在后面进行变量的赋值。\n \n> [定义一个超链接名称]\\[定义一个超链接变量名称]&nbsp;  \n> [超链接变量名称]:https:\\\\www.stayrabbit.top //需跟上面定义的变量名称相对应:后面接地址\n\n示例：\n\n [2.9.1的示例][example]\n\n [example]:http://www.stayrabbit.top/\n\n P.S. 查看本篇Markdown的源代码，这里把`example`用作超链接的变量名称，把`2.9.1的示例`用作超链接的名称\n\n---\n\n ### 2.10 插入图片\n\n- 在Markdown中插入图片  \n\n>\\![图片属性名称]\\(图片的地址 \"图片提示语\") //\"图片提示语\"可以不填  \n\n>\\![图片属性名称]\\(https://avatars.githubusercontent.com/u/59606047?s=400&u=155fe46660bc002266cbcba0719bdda83d79edb4&v=4 \"示例图片提示语\")\n\n示例\n![图片属性名称](https://avatars.githubusercontent.com/u/59606047?s=400&u=155fe46660bc002266cbcba0719bdda83d79edb4&v=4 \"示例图片提示语\")\n\n\n- 或者引用文件中的相对地址\n\n>\\![图片属性名称]\\(../image/icon.jpg \"图片提示语\")  //\"图片提示语\"可以不填\n\n示例：\n\n![相对地址图片名称](../image/icon.jpg \"示例图片提示语\")\n\n\n\n\n#### 2.10.1 指定图片的高度与宽度\n\n- Markdown不能指定图片的高度与宽度，如果你需要改变的话可以用HTML的`<img>`标签\n\n> \\<img decoding=\"async\" src=\"/../image/icon.jpg\" width=\"10%\" title=\"img标签的示例\" >\n\n示例：\n\n\n> <img decoding=\"async\" src=\"/../image/icon.jpg\" width=\"10%\" title=\"img标签的示例\">\n\n### 2.11 表格\n\n- Markdown可以在做笔记或者撰写文档的时候使用表格用`|`来分隔不同的单元格,使用`-`来分隔其他表头和行\n  \n>\\| 表头1 \\| 表头2 \\|\n>\\| ---- | ---- |\n>\\| 单元格 | 单元格 |\n>\\| 单元格 | 单元格 |\n\n示例：\n\n| 表头1 | 表头2 |\n| ---- | ---- |\n| 单元格 | 单元格 |\n| 单元格 | 单元格 |\n\n\n#### 2.11.1 表格的对齐  \n\n- 表格中的内容可以相对于表格对齐\n\n- `:-`居左对齐\n- `:-:`居中对齐\n- `-:`居右对齐\n\n示例：\n\n| 居左对齐 | 居中对齐 | 居右对齐 |\n| :---- | :----: | ----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n\n### 2.12 注释\n\n- Markdown的注释与HTML的注释类似可以在源代码中标识一段而不被渲染出来\n\n> \\<!-\\-注释-\\->\n\n示例：  \n\n<!--注释的示例-->\n\nP.S.结合源代码来查看示例\n\n## 三、参考文献\n\n1. Markdown - 维基百科，自由的百科全书 -wiki- https://zh.wikipedia.org/wiki/Markdown  \n2. 第 3 期、写作：使用 Markdown 记笔记入门 -知乎- https://zhuanlan.zhihu.com/p/496076040\n3. runoob Markdown教程 -runoob.com- https://www.runoob.com/markdown/md-tutorial.html\n\n\n## 四、扩展阅读\n\n1. Markdown 写作规范和格式规范 -腾讯云|开发者社区- https://cloud.tencent.com/developer/article/2087118  \n2. Markdown 编写规范 -Github- https://github.com/fex-team/styleguide/blob/master/markdown.md\n3. Markdown style guide -Github- https://github.com/google/styleguide/blob/gh-pages/docguide/style.md\n4. 搭建 Markdown 强大写作环境（VSCode）-知乎- https://zhuanlan.zhihu.com/p/139140492\n5. 计算机学生的第零课 -OrangeX4's Blog- https://orangex4.cool/post/lesson-zero-for-cs-students/\n\n\n\n## 后续将继续更新其他高级用法...\n\n[LaTex](https://htmlpreview.github.io/?https://github.com/NgaiYeanCoi/NYC-Notes/blob/master/%E7%BC%96%E7%A8%8B%E7%B1%BB/LaTex/LaTex.html)\n","categories":["study","tech"]}]